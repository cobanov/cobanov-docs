{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello \ud83d\udc4b Welcome to my blog, Here is a lot of stuff you can find, on my blog I usually write about topics of interest and sometimes I publish translations, In the portfolio part, I have my works, sometimes I produce artistic things. If you want to see it, you can visit it.","title":"Hello \ud83d\udc4b"},{"location":"#hello","text":"Welcome to my blog, Here is a lot of stuff you can find, on my blog I usually write about topics of interest and sometimes I publish translations, In the portfolio part, I have my works, sometimes I produce artistic things. If you want to see it, you can visit it.","title":"Hello \ud83d\udc4b"},{"location":"about/","text":"Mert Cobanov #0001 Username: @cobanov Job: Data Scientist, Refik Anadol Studio Date of Birth: 02.01.1996 About Community lover, data scientist and generative artist. I love to share what I know, so I try to provide free data science and machine learning education to everyone on my twitter and youtube channel. I teach at several schools and communities each year. I work as a data scientist at Refik Anadol Studio , where we do great artistic works with my excellent team, and we try to digitize the memories of humanity to immortalize it. Links More You can see my work in my github repos and my humble portfolio . I really enjoy writing minimal tools that make the lives of software developers easier, building end-to-end pipelines, and doing AI artistic painting works that motivate me immensely. I also digitize and repair old video tapes and bring them to high resolution and high fps forms.","title":"Main Page"},{"location":"about/#mert-cobanov-0001","text":"Username: @cobanov Job: Data Scientist, Refik Anadol Studio Date of Birth: 02.01.1996","title":"Mert Cobanov #0001"},{"location":"about/#about","text":"Community lover, data scientist and generative artist. I love to share what I know, so I try to provide free data science and machine learning education to everyone on my twitter and youtube channel. I teach at several schools and communities each year. I work as a data scientist at Refik Anadol Studio , where we do great artistic works with my excellent team, and we try to digitize the memories of humanity to immortalize it.","title":"About"},{"location":"about/#links","text":"","title":"Links"},{"location":"about/#more","text":"You can see my work in my github repos and my humble portfolio . I really enjoy writing minimal tools that make the lives of software developers easier, building end-to-end pipelines, and doing AI artistic painting works that motivate me immensely. I also digitize and repair old video tapes and bring them to high resolution and high fps forms.","title":"More"},{"location":"cyberpunk/","text":"Bir Cypherpunk'\u0131n Manifestosu by Eric Hughes Elektronik \u00e7a\u011fda a\u00e7\u0131k bir toplum i\u00e7in mahremiyet gereklidir. Gizlilik gizlilik de\u011fildir. \u00d6zel bir konu, t\u00fcm d\u00fcnyan\u0131n bilmesini istemedi\u011fi bir \u015feydir, ancak gizli bir konu, kimsenin bilmesini istemedi\u011fi bir \u015feydir. Gizlilik, kendini d\u00fcnyaya se\u00e7ici olarak g\u00f6sterme g\u00fcc\u00fcd\u00fcr. E\u011fer iki taraf bir t\u00fcr anla\u015fmaya sahipse, her birinin etkile\u015fimlerinin bir an\u0131s\u0131 vard\u0131r. Her bir taraf bununla ilgili kendi an\u0131lar\u0131 hakk\u0131nda konu\u015fabilir; kimse bunu nas\u0131l engelleyebilir? Buna kar\u015f\u0131 yasalar \u00e7\u0131kar\u0131labilir, ancak konu\u015fma \u00f6zg\u00fcrl\u00fc\u011f\u00fc, mahremiyetten bile daha fazlas\u0131, a\u00e7\u0131k bir toplum i\u00e7in esast\u0131r; hi\u00e7bir konu\u015fmay\u0131 k\u0131s\u0131tlamamaya \u00e7al\u0131\u015f\u0131yoruz. Ayn\u0131 forumda bir\u00e7ok taraf birlikte konu\u015fursa, her biri di\u011ferleriyle konu\u015fabilir ve bireyler ve di\u011fer taraflar hakk\u0131ndaki bilgileri bir araya toplayabilir. Elektronik ileti\u015fimin g\u00fcc\u00fc bu t\u00fcr grup konu\u015fmalar\u0131n\u0131 m\u00fcmk\u00fcn k\u0131lm\u0131\u015ft\u0131r ve sadece biz isteyebilece\u011fimiz i\u00e7in ortadan kalkmayacakt\u0131r. Gizlili\u011fi arzulad\u0131\u011f\u0131m\u0131z i\u00e7in, bir i\u015flemin her bir taraf\u0131n\u0131n yaln\u0131zca o i\u015flem i\u00e7in do\u011frudan gerekli olan\u0131 bilmesini sa\u011flamal\u0131y\u0131z. Herhangi bir bilgi konu\u015fulabilece\u011finden, m\u00fcmk\u00fcn oldu\u011funca az a\u00e7\u0131klama yapt\u0131\u011f\u0131m\u0131zdan emin olmal\u0131y\u0131z. \u00c7o\u011fu durumda ki\u015fisel kimlik belirgin de\u011fildir. Bir ma\u011fazadan bir dergi sat\u0131n ald\u0131\u011f\u0131mda ve katiyere nakit verdi\u011fimde, kim oldu\u011fumu bilmeme gerek yok. Elektronik posta sa\u011flay\u0131c\u0131mdan mesaj g\u00f6nderip almas\u0131n\u0131 istedi\u011fimde, sa\u011flay\u0131c\u0131m\u0131n kiminle konu\u015ftu\u011fumu, ne s\u00f6yledi\u011fimi veya ba\u015fkalar\u0131n\u0131n bana ne s\u00f6yledi\u011fini bilmesine gerek yoktur; sa\u011flay\u0131c\u0131m\u0131n sadece mesaj\u0131 oraya nas\u0131l ula\u015ft\u0131raca\u011f\u0131n\u0131 ve onlara ne kadar \u00fccret bor\u00e7lu oldu\u011fumu bilmesi gerekiyor. Kimli\u011fim i\u015flemin alt\u0131nda yatan mekanizma taraf\u0131ndan if\u015fa edildi\u011finde, mahremiyetim yok. Burada se\u00e7ici olarak kendimi if\u015fa edemem; her zaman yapmal\u0131y\u0131m kendimi if\u015fa et. Bu nedenle, a\u00e7\u0131k bir toplumda mahremiyet, anonim i\u015flem sistemleri gerektirir. \u015eimdiye kadar, nakit bu t\u00fcr birincil sistem olmu\u015ftur. Anonim bir i\u015flem sistemi, gizli bir i\u015flem sistemi de\u011fildir. Anonim bir sistem, bireylere kimliklerini istendi\u011finde ve yaln\u0131zca istendi\u011finde if\u015fa etme yetkisi verir; mahremiyetin \u00f6z\u00fc budur. A\u00e7\u0131k bir toplumda gizlilik de kriptografi gerektirir. Bir \u015fey s\u00f6ylersem, sadece niyet etti\u011fim ki\u015filer taraf\u0131ndan duyulmas\u0131n\u0131 isterim. Konu\u015fmam\u0131n i\u00e7eri\u011fi d\u00fcnyaya a\u00e7\u0131ksa, mahremiyetim yok. \u015eifrelemek, mahremiyet arzusunu belirtmektir ve zay\u0131f \u015fifreleme ile \u015fifrelemek, mahremiyet i\u00e7in \u00e7ok fazla arzu olmad\u0131\u011f\u0131n\u0131 belirtmektir. Ayr\u0131ca, varsay\u0131lan anonimlik oldu\u011funda, ki\u015finin kimli\u011fini g\u00fcvence ile ortaya \u00e7\u0131karmak i\u00e7in kriptografik imza gerekir. H\u00fck\u00fcmetlerin, \u015firketlerin veya di\u011fer b\u00fcy\u00fck, kimli\u011fi belirsiz kurulu\u015flar\u0131n, kendi yararlar\u0131 d\u0131\u015f\u0131nda bize mahremiyet vermelerini bekleyemeyiz. Bizim hakk\u0131m\u0131zda konu\u015fmak onlar\u0131n yarar\u0131nad\u0131r ve konu\u015fmalar\u0131n\u0131 beklemeliyiz. Konu\u015fmalar\u0131n\u0131 engellemeye \u00e7al\u0131\u015fmak, bilgi ger\u00e7ekleriyle sava\u015fmakt\u0131r. Bilgi sadece \u00f6zg\u00fcr olmak istemez, \u00f6zg\u00fcr olmay\u0131 arzular. Bilgi, mevcut depolama alan\u0131n\u0131 dolduracak \u015fekilde geni\u015fler. Bilgi, Rumor'un daha gen\u00e7, daha g\u00fc\u00e7l\u00fc kuzenidir; Bilgi, daha h\u0131zl\u0131d\u0131r, daha fazla g\u00f6ze sahiptir, daha fazlas\u0131n\u0131 bilir ve S\u00f6ylentiden daha az anlar. Herhangi bir mahremiyete sahip olmay\u0131 umuyorsak, kendi mahremiyetimizi savunmal\u0131y\u0131z. Bir araya gelmeli ve anonim i\u015flemlerin ger\u00e7ekle\u015fmesine izin veren sistemler olu\u015fturmal\u0131y\u0131z. \u0130nsanlar y\u00fczy\u0131llard\u0131r f\u0131s\u0131lt\u0131lar, karanl\u0131k, zarflar, kapal\u0131 kap\u0131lar, gizli tokala\u015fmalar ve kuryelerle kendi mahremiyetlerini savunuyorlar. Ge\u00e7mi\u015fin teknolojileri g\u00fc\u00e7l\u00fc bir mahremiyete izin vermiyordu, ancak elektronik teknolojiler izin veriyor. Biz Cypherpunk'lar, kendimizi anonim sistemler olu\u015fturmaya adad\u0131k. Gizlili\u011fimizi kriptografi, anonim posta y\u00f6nlendirme sistemleri, dijital imzalar ve elektronik para ile koruyoruz. Cypherpunk'lar kod yazar. Birinin mahremiyeti savunmak i\u00e7in yaz\u0131l\u0131m yazmas\u0131 gerekti\u011fini biliyoruz ve hepimiz bunu yapmad\u0131k\u00e7a mahremiyet elde edemeyece\u011fimiz i\u00e7in yazaca\u011f\u0131z. Kodumuzu Cypherpunk arkada\u015flar\u0131m\u0131z\u0131n pratik yap\u0131p onunla oynayabilmeleri i\u00e7in yay\u0131nl\u0131yoruz. Kodumuz, d\u00fcnya \u00e7ap\u0131nda herkesin kullan\u0131m\u0131 i\u00e7in \u00fccretsizdir. Yazd\u0131\u011f\u0131m\u0131z yaz\u0131l\u0131m\u0131 onaylamaman\u0131z pek umurumuzda de\u011fil. Yaz\u0131l\u0131m\u0131n yok edilemeyece\u011fini ve geni\u015f bir alana yay\u0131lm\u0131\u015f bir sistemin kapat\u0131lamayaca\u011f\u0131n\u0131 biliyoruz. \u015eifreleme temelde \u00f6zel bir eylem oldu\u011fundan, Cypherpunk'lar kriptografi ile ilgili d\u00fczenlemelerden \u015fikayet\u00e7idir. \u015eifreleme eylemi asl\u0131nda bilgiyi kamusal alandan kald\u0131r\u0131r. Kriptografiye kar\u015f\u0131 yasalar bile ancak bir ulusun s\u0131n\u0131r\u0131na ve \u015fiddetinin koluna kadar ula\u015f\u0131r. Kriptografi ka\u00e7\u0131n\u0131lmaz olarak t\u00fcm d\u00fcnyaya ve onunla birlikte m\u00fcmk\u00fcn k\u0131ld\u0131\u011f\u0131 anonim i\u015flem sistemlerine yay\u0131lacakt\u0131r. Mahremiyetin yayg\u0131nla\u015fmas\u0131 i\u00e7in bir sosyal s\u00f6zle\u015fmenin par\u00e7as\u0131 olmas\u0131 gerekir. \u0130nsanlar bir araya gelmeli ve bu sistemleri ortak yarar i\u00e7in kullanmal\u0131d\u0131r. Mahremiyet ancak, ki\u015finin toplumdaki hemcinslerinin i\u015fbirli\u011fi kadar geni\u015fler. Biz Cypherpunk'lar sorular\u0131n\u0131z\u0131 ve endi\u015felerinizi ar\u0131yoruz ve kendimizi kand\u0131rmamak i\u00e7in sizi me\u015fgul edebilece\u011fimizi umuyoruz. Bununla birlikte, baz\u0131lar\u0131 hedeflerimize kat\u0131lmayabilece\u011finden, rotam\u0131zdan ayr\u0131lmayaca\u011f\u0131z. Cypherpunks, a\u011flar\u0131 gizlilik i\u00e7in daha g\u00fcvenli hale getirmek i\u00e7in aktif olarak \u00e7al\u0131\u015f\u0131yor. H\u0131zla birlikte ilerleyelim. \u0130leriye. Eric Hughes < hughes@soda.berkeley.edu > 9 Mart 1993","title":"Cypherpunk Manifesto"},{"location":"cyberpunk/#bir-cypherpunkn-manifestosu","text":"by Eric Hughes Elektronik \u00e7a\u011fda a\u00e7\u0131k bir toplum i\u00e7in mahremiyet gereklidir. Gizlilik gizlilik de\u011fildir. \u00d6zel bir konu, t\u00fcm d\u00fcnyan\u0131n bilmesini istemedi\u011fi bir \u015feydir, ancak gizli bir konu, kimsenin bilmesini istemedi\u011fi bir \u015feydir. Gizlilik, kendini d\u00fcnyaya se\u00e7ici olarak g\u00f6sterme g\u00fcc\u00fcd\u00fcr. E\u011fer iki taraf bir t\u00fcr anla\u015fmaya sahipse, her birinin etkile\u015fimlerinin bir an\u0131s\u0131 vard\u0131r. Her bir taraf bununla ilgili kendi an\u0131lar\u0131 hakk\u0131nda konu\u015fabilir; kimse bunu nas\u0131l engelleyebilir? Buna kar\u015f\u0131 yasalar \u00e7\u0131kar\u0131labilir, ancak konu\u015fma \u00f6zg\u00fcrl\u00fc\u011f\u00fc, mahremiyetten bile daha fazlas\u0131, a\u00e7\u0131k bir toplum i\u00e7in esast\u0131r; hi\u00e7bir konu\u015fmay\u0131 k\u0131s\u0131tlamamaya \u00e7al\u0131\u015f\u0131yoruz. Ayn\u0131 forumda bir\u00e7ok taraf birlikte konu\u015fursa, her biri di\u011ferleriyle konu\u015fabilir ve bireyler ve di\u011fer taraflar hakk\u0131ndaki bilgileri bir araya toplayabilir. Elektronik ileti\u015fimin g\u00fcc\u00fc bu t\u00fcr grup konu\u015fmalar\u0131n\u0131 m\u00fcmk\u00fcn k\u0131lm\u0131\u015ft\u0131r ve sadece biz isteyebilece\u011fimiz i\u00e7in ortadan kalkmayacakt\u0131r. Gizlili\u011fi arzulad\u0131\u011f\u0131m\u0131z i\u00e7in, bir i\u015flemin her bir taraf\u0131n\u0131n yaln\u0131zca o i\u015flem i\u00e7in do\u011frudan gerekli olan\u0131 bilmesini sa\u011flamal\u0131y\u0131z. Herhangi bir bilgi konu\u015fulabilece\u011finden, m\u00fcmk\u00fcn oldu\u011funca az a\u00e7\u0131klama yapt\u0131\u011f\u0131m\u0131zdan emin olmal\u0131y\u0131z. \u00c7o\u011fu durumda ki\u015fisel kimlik belirgin de\u011fildir. Bir ma\u011fazadan bir dergi sat\u0131n ald\u0131\u011f\u0131mda ve katiyere nakit verdi\u011fimde, kim oldu\u011fumu bilmeme gerek yok. Elektronik posta sa\u011flay\u0131c\u0131mdan mesaj g\u00f6nderip almas\u0131n\u0131 istedi\u011fimde, sa\u011flay\u0131c\u0131m\u0131n kiminle konu\u015ftu\u011fumu, ne s\u00f6yledi\u011fimi veya ba\u015fkalar\u0131n\u0131n bana ne s\u00f6yledi\u011fini bilmesine gerek yoktur; sa\u011flay\u0131c\u0131m\u0131n sadece mesaj\u0131 oraya nas\u0131l ula\u015ft\u0131raca\u011f\u0131n\u0131 ve onlara ne kadar \u00fccret bor\u00e7lu oldu\u011fumu bilmesi gerekiyor. Kimli\u011fim i\u015flemin alt\u0131nda yatan mekanizma taraf\u0131ndan if\u015fa edildi\u011finde, mahremiyetim yok. Burada se\u00e7ici olarak kendimi if\u015fa edemem; her zaman yapmal\u0131y\u0131m kendimi if\u015fa et. Bu nedenle, a\u00e7\u0131k bir toplumda mahremiyet, anonim i\u015flem sistemleri gerektirir. \u015eimdiye kadar, nakit bu t\u00fcr birincil sistem olmu\u015ftur. Anonim bir i\u015flem sistemi, gizli bir i\u015flem sistemi de\u011fildir. Anonim bir sistem, bireylere kimliklerini istendi\u011finde ve yaln\u0131zca istendi\u011finde if\u015fa etme yetkisi verir; mahremiyetin \u00f6z\u00fc budur. A\u00e7\u0131k bir toplumda gizlilik de kriptografi gerektirir. Bir \u015fey s\u00f6ylersem, sadece niyet etti\u011fim ki\u015filer taraf\u0131ndan duyulmas\u0131n\u0131 isterim. Konu\u015fmam\u0131n i\u00e7eri\u011fi d\u00fcnyaya a\u00e7\u0131ksa, mahremiyetim yok. \u015eifrelemek, mahremiyet arzusunu belirtmektir ve zay\u0131f \u015fifreleme ile \u015fifrelemek, mahremiyet i\u00e7in \u00e7ok fazla arzu olmad\u0131\u011f\u0131n\u0131 belirtmektir. Ayr\u0131ca, varsay\u0131lan anonimlik oldu\u011funda, ki\u015finin kimli\u011fini g\u00fcvence ile ortaya \u00e7\u0131karmak i\u00e7in kriptografik imza gerekir. H\u00fck\u00fcmetlerin, \u015firketlerin veya di\u011fer b\u00fcy\u00fck, kimli\u011fi belirsiz kurulu\u015flar\u0131n, kendi yararlar\u0131 d\u0131\u015f\u0131nda bize mahremiyet vermelerini bekleyemeyiz. Bizim hakk\u0131m\u0131zda konu\u015fmak onlar\u0131n yarar\u0131nad\u0131r ve konu\u015fmalar\u0131n\u0131 beklemeliyiz. Konu\u015fmalar\u0131n\u0131 engellemeye \u00e7al\u0131\u015fmak, bilgi ger\u00e7ekleriyle sava\u015fmakt\u0131r. Bilgi sadece \u00f6zg\u00fcr olmak istemez, \u00f6zg\u00fcr olmay\u0131 arzular. Bilgi, mevcut depolama alan\u0131n\u0131 dolduracak \u015fekilde geni\u015fler. Bilgi, Rumor'un daha gen\u00e7, daha g\u00fc\u00e7l\u00fc kuzenidir; Bilgi, daha h\u0131zl\u0131d\u0131r, daha fazla g\u00f6ze sahiptir, daha fazlas\u0131n\u0131 bilir ve S\u00f6ylentiden daha az anlar. Herhangi bir mahremiyete sahip olmay\u0131 umuyorsak, kendi mahremiyetimizi savunmal\u0131y\u0131z. Bir araya gelmeli ve anonim i\u015flemlerin ger\u00e7ekle\u015fmesine izin veren sistemler olu\u015fturmal\u0131y\u0131z. \u0130nsanlar y\u00fczy\u0131llard\u0131r f\u0131s\u0131lt\u0131lar, karanl\u0131k, zarflar, kapal\u0131 kap\u0131lar, gizli tokala\u015fmalar ve kuryelerle kendi mahremiyetlerini savunuyorlar. Ge\u00e7mi\u015fin teknolojileri g\u00fc\u00e7l\u00fc bir mahremiyete izin vermiyordu, ancak elektronik teknolojiler izin veriyor. Biz Cypherpunk'lar, kendimizi anonim sistemler olu\u015fturmaya adad\u0131k. Gizlili\u011fimizi kriptografi, anonim posta y\u00f6nlendirme sistemleri, dijital imzalar ve elektronik para ile koruyoruz. Cypherpunk'lar kod yazar. Birinin mahremiyeti savunmak i\u00e7in yaz\u0131l\u0131m yazmas\u0131 gerekti\u011fini biliyoruz ve hepimiz bunu yapmad\u0131k\u00e7a mahremiyet elde edemeyece\u011fimiz i\u00e7in yazaca\u011f\u0131z. Kodumuzu Cypherpunk arkada\u015flar\u0131m\u0131z\u0131n pratik yap\u0131p onunla oynayabilmeleri i\u00e7in yay\u0131nl\u0131yoruz. Kodumuz, d\u00fcnya \u00e7ap\u0131nda herkesin kullan\u0131m\u0131 i\u00e7in \u00fccretsizdir. Yazd\u0131\u011f\u0131m\u0131z yaz\u0131l\u0131m\u0131 onaylamaman\u0131z pek umurumuzda de\u011fil. Yaz\u0131l\u0131m\u0131n yok edilemeyece\u011fini ve geni\u015f bir alana yay\u0131lm\u0131\u015f bir sistemin kapat\u0131lamayaca\u011f\u0131n\u0131 biliyoruz. \u015eifreleme temelde \u00f6zel bir eylem oldu\u011fundan, Cypherpunk'lar kriptografi ile ilgili d\u00fczenlemelerden \u015fikayet\u00e7idir. \u015eifreleme eylemi asl\u0131nda bilgiyi kamusal alandan kald\u0131r\u0131r. Kriptografiye kar\u015f\u0131 yasalar bile ancak bir ulusun s\u0131n\u0131r\u0131na ve \u015fiddetinin koluna kadar ula\u015f\u0131r. Kriptografi ka\u00e7\u0131n\u0131lmaz olarak t\u00fcm d\u00fcnyaya ve onunla birlikte m\u00fcmk\u00fcn k\u0131ld\u0131\u011f\u0131 anonim i\u015flem sistemlerine yay\u0131lacakt\u0131r. Mahremiyetin yayg\u0131nla\u015fmas\u0131 i\u00e7in bir sosyal s\u00f6zle\u015fmenin par\u00e7as\u0131 olmas\u0131 gerekir. \u0130nsanlar bir araya gelmeli ve bu sistemleri ortak yarar i\u00e7in kullanmal\u0131d\u0131r. Mahremiyet ancak, ki\u015finin toplumdaki hemcinslerinin i\u015fbirli\u011fi kadar geni\u015fler. Biz Cypherpunk'lar sorular\u0131n\u0131z\u0131 ve endi\u015felerinizi ar\u0131yoruz ve kendimizi kand\u0131rmamak i\u00e7in sizi me\u015fgul edebilece\u011fimizi umuyoruz. Bununla birlikte, baz\u0131lar\u0131 hedeflerimize kat\u0131lmayabilece\u011finden, rotam\u0131zdan ayr\u0131lmayaca\u011f\u0131z. Cypherpunks, a\u011flar\u0131 gizlilik i\u00e7in daha g\u00fcvenli hale getirmek i\u00e7in aktif olarak \u00e7al\u0131\u015f\u0131yor. H\u0131zla birlikte ilerleyelim. \u0130leriye. Eric Hughes < hughes@soda.berkeley.edu > 9 Mart 1993","title":"Bir Cypherpunk'\u0131n Manifestosu"},{"location":"helpers/","text":"Helper Codes Remote Connection SSH ssh -J mert@{servername}.ddns.net:port mert@target SCP From Local scp -o \"ProxyJump mert@servername.ddns.net -p {port}\" test.txt mert@target-pc:/home/mert/ Download File From Remote Server scp -o \"ProxyJump mert@servername.ddns.net -p {port}\" mert@target-pc:/home/mert/ test.txt Various Download File wget --user-agent Mozilla/4.0 'big address' -O dest_file_name Rename Files ls -v | cat -n | while read n f; do mv -n \"$f\" \"$n.ext\"; done Extract Files 7za x test.7z String Slicing # From Character for f in raw_daily/*.csv; do echo $f /dimensions_\"${f#*blocks_}\"; done # TO Character for f in raw_daily/*.csv; do echo $f /dimensions_\"${f%*blocks_}\"; done Random File Name for i in *.jpg; do mv -i \"$i\" ${RANDOM}${RANDOM}.jpg; done Move Files for f in png-exports/*; do cp $f/*.png all_images; done Delete Files Recursively find e -maxdepth 10 -type f -name \".*\" -delete Get Dimensions from Folder ls -U | while read n; do identify -format \"%f,%w,%h\\n\" \"$n\"; done > file_size.csv FFMPEG MP3 \u2192 WAV for f in *.mp3; do ffmpeg -i \"$f\" -acodec pcm_s16le -ac 1 -ar 16000 \"wav-exports/${f%.}.wav\"; done for f in *.flac; do ffmpeg -i \"$f\" \"wav-exports/${f%.}.wav\"; done WAV \u2192 mp3 for f in *.*; do ffmpeg -i \"$f\" \"wav-exports/${f%.}.wav\"; done for f in *; do ffmpeg -i \"${f}\" -vn -ab 128k -ar 44100 -y \"${f}.mp3\" ; done PNG Sequence \u2192 MP4 ffmpeg -f image2 -r 30 -i image_%6d.png -vcodec libx264 -crf 18 -pix_fmt yuv420p output.mp4 MP4 \u2192 PNG ffmpeg -i test.mp4 -vf fps=1/2 png-exports/video13_%06d.png for f in *.mp4; do ffmpeg -i \"$f\" -vf fps=2 png-exports/${f%.*}_%06d.png; done MOV to Optimized GIF ffmpeg -i test.mov -vf scale=320:-1 -r 10 output/ffout%3d.png convert -delay 8 -loop 0 output/ffout*.png output/test.gif Image Convert all images in directory mogrify -format png *.* ESRGAN python inference_realesrgan.py -n RealESRGAN_x4plus -i v13 -s 3 --suffix 8k -t 1500 -o v13_out","title":"Helper one-liners"},{"location":"helpers/#helper-codes","text":"","title":"Helper Codes"},{"location":"helpers/#remote-connection","text":"","title":"Remote Connection"},{"location":"helpers/#ssh","text":"ssh -J mert@{servername}.ddns.net:port mert@target","title":"SSH"},{"location":"helpers/#scp","text":"","title":"SCP"},{"location":"helpers/#from-local","text":"scp -o \"ProxyJump mert@servername.ddns.net -p {port}\" test.txt mert@target-pc:/home/mert/","title":"From Local"},{"location":"helpers/#download-file-from-remote-server","text":"scp -o \"ProxyJump mert@servername.ddns.net -p {port}\" mert@target-pc:/home/mert/ test.txt","title":"Download File From Remote Server"},{"location":"helpers/#various","text":"","title":"Various"},{"location":"helpers/#download-file","text":"wget --user-agent Mozilla/4.0 'big address' -O dest_file_name","title":"Download File"},{"location":"helpers/#rename-files","text":"ls -v | cat -n | while read n f; do mv -n \"$f\" \"$n.ext\"; done","title":"Rename Files"},{"location":"helpers/#extract-files","text":"7za x test.7z","title":"Extract Files"},{"location":"helpers/#string-slicing","text":"# From Character for f in raw_daily/*.csv; do echo $f /dimensions_\"${f#*blocks_}\"; done # TO Character for f in raw_daily/*.csv; do echo $f /dimensions_\"${f%*blocks_}\"; done","title":"String Slicing"},{"location":"helpers/#random-file-name","text":"for i in *.jpg; do mv -i \"$i\" ${RANDOM}${RANDOM}.jpg; done","title":"Random File Name"},{"location":"helpers/#move-files","text":"for f in png-exports/*; do cp $f/*.png all_images; done","title":"Move Files"},{"location":"helpers/#delete-files-recursively","text":"find e -maxdepth 10 -type f -name \".*\" -delete","title":"Delete Files Recursively"},{"location":"helpers/#get-dimensions-from-folder","text":"ls -U | while read n; do identify -format \"%f,%w,%h\\n\" \"$n\"; done > file_size.csv","title":"Get Dimensions from Folder"},{"location":"helpers/#ffmpeg","text":"","title":"FFMPEG"},{"location":"helpers/#mp3-wav","text":"for f in *.mp3; do ffmpeg -i \"$f\" -acodec pcm_s16le -ac 1 -ar 16000 \"wav-exports/${f%.}.wav\"; done for f in *.flac; do ffmpeg -i \"$f\" \"wav-exports/${f%.}.wav\"; done","title":"MP3 \u2192 WAV"},{"location":"helpers/#wav-mp3","text":"for f in *.*; do ffmpeg -i \"$f\" \"wav-exports/${f%.}.wav\"; done for f in *; do ffmpeg -i \"${f}\" -vn -ab 128k -ar 44100 -y \"${f}.mp3\" ; done","title":"WAV  \u2192 mp3"},{"location":"helpers/#png-sequence-mp4","text":"ffmpeg -f image2 -r 30 -i image_%6d.png -vcodec libx264 -crf 18 -pix_fmt yuv420p output.mp4","title":"PNG Sequence \u2192 MP4"},{"location":"helpers/#mp4-png","text":"ffmpeg -i test.mp4 -vf fps=1/2 png-exports/video13_%06d.png for f in *.mp4; do ffmpeg -i \"$f\" -vf fps=2 png-exports/${f%.*}_%06d.png; done","title":"MP4 \u2192 PNG"},{"location":"helpers/#mov-to-optimized-gif","text":"ffmpeg -i test.mov -vf scale=320:-1 -r 10 output/ffout%3d.png convert -delay 8 -loop 0 output/ffout*.png output/test.gif","title":"MOV to Optimized GIF"},{"location":"helpers/#image","text":"Convert all images in directory mogrify -format png *.*","title":"Image"},{"location":"helpers/#esrgan","text":"python inference_realesrgan.py -n RealESRGAN_x4plus -i v13 -s 3 --suffix 8k -t 1500 -o v13_out","title":"ESRGAN"},{"location":"nerf/","text":"NeRF Docker Setup Prerequisites Docker CUDA 11.3 Install Pull latest docker image docker pull dromni/nerfstudio:<version_number> Run docker image docker run --gpus all -v /folder/of/your/data:/workspace/ -v /home/<YOUR_USER>/cache/:/home/user/.cache/ -p 7007:7007 --rm -it dromni/nerfstudio:0.1.13 Example for Windows: docker run --gpus all -v D:\\nerf:/workspace/ -v D:\\nerf/:/home/user/.cache/ -p 7007:7007 --rm -it dromni/nerfstudio:0.1.13 - Give the container access to nvidia GPU (required). - Mount a folder from the local machine into the container to be able to process them (required). - Mount cache folder to avoid re-downloading of models everytime (recommended). - Map port from local machine to docker container (required to access the web interface UI). - Remove container after it is closed (recommended). - Start container in interactive mode. - Docker image name Training First Model Don't forget to change the directory cd /workspace Be sure to do everything you do after this point in the /workspace directory. Start Training ns-download-data nerfstudio --capture-name=poster Because this code is often used too much, google drive can put a download restriction, read the error message and try to download the file in the link with your browser. After downloading the file, you can copy the folder into the volume D:\\nerf\\data\\nerfstudio you opened. Explore NeRF Studio A web page similar to the link below will appear on your terminal screen, open this page and continue. https://viewer.nerf.studio/versions/22-12-02-0/?websocket_url=ws://localhost:7007 Resume & Stop Training You can stop the training with the Ctrl + c shortcut. If you want to continue the training from where it left off, run the code below. ns-train nerfacto --data data/nerfstudio/poster --trainer.load-dir {outputs/.../nerfstudio_models} Training on Custom Data Put your files in the main directory of the volume you opened, you can also keep them in a folder in the main directory. ns-process-data {video,images,polycam,insta360,record3d} --data {DATA_PATH} --output-dir {PROCESSED_DATA_DIR} Example It points to the same place in the following two paths. one its location on the host and the other its location inside the container. Raw File Path: D:\\nerf\\raw_data\\IMG_6070.MOV /workspace/raw_data/IMG_6070.MOV Target Folder Path: D:\\nerf\\outputs\\test_video /workspace/outputs/banks ns-process-data video --data /workspace/raw_data/IMG_6070.MOV --output-dir /workspace/outputs/banks Exporting Results KIRI Engine","title":"NeRF"},{"location":"nerf/#nerf-docker-setup","text":"","title":"NeRF Docker Setup"},{"location":"nerf/#prerequisites","text":"Docker CUDA 11.3","title":"Prerequisites"},{"location":"nerf/#install","text":"Pull latest docker image docker pull dromni/nerfstudio:<version_number> Run docker image docker run --gpus all -v /folder/of/your/data:/workspace/ -v /home/<YOUR_USER>/cache/:/home/user/.cache/ -p 7007:7007 --rm -it dromni/nerfstudio:0.1.13 Example for Windows: docker run --gpus all -v D:\\nerf:/workspace/ -v D:\\nerf/:/home/user/.cache/ -p 7007:7007 --rm -it dromni/nerfstudio:0.1.13 - Give the container access to nvidia GPU (required). - Mount a folder from the local machine into the container to be able to process them (required). - Mount cache folder to avoid re-downloading of models everytime (recommended). - Map port from local machine to docker container (required to access the web interface UI). - Remove container after it is closed (recommended). - Start container in interactive mode. - Docker image name","title":"Install"},{"location":"nerf/#training-first-model","text":"","title":"Training First Model"},{"location":"nerf/#dont-forget-to-change-the-directory","text":"cd /workspace Be sure to do everything you do after this point in the /workspace directory.","title":"Don't forget to change the directory"},{"location":"nerf/#start-training","text":"ns-download-data nerfstudio --capture-name=poster Because this code is often used too much, google drive can put a download restriction, read the error message and try to download the file in the link with your browser. After downloading the file, you can copy the folder into the volume D:\\nerf\\data\\nerfstudio you opened.","title":"Start Training"},{"location":"nerf/#explore-nerf-studio","text":"A web page similar to the link below will appear on your terminal screen, open this page and continue. https://viewer.nerf.studio/versions/22-12-02-0/?websocket_url=ws://localhost:7007","title":"Explore NeRF Studio"},{"location":"nerf/#resume-stop-training","text":"You can stop the training with the Ctrl + c shortcut. If you want to continue the training from where it left off, run the code below. ns-train nerfacto --data data/nerfstudio/poster --trainer.load-dir {outputs/.../nerfstudio_models}","title":"Resume &amp; Stop Training"},{"location":"nerf/#training-on-custom-data","text":"Put your files in the main directory of the volume you opened, you can also keep them in a folder in the main directory. ns-process-data {video,images,polycam,insta360,record3d} --data {DATA_PATH} --output-dir {PROCESSED_DATA_DIR}","title":"Training on Custom Data"},{"location":"nerf/#example","text":"It points to the same place in the following two paths. one its location on the host and the other its location inside the container. Raw File Path: D:\\nerf\\raw_data\\IMG_6070.MOV /workspace/raw_data/IMG_6070.MOV Target Folder Path: D:\\nerf\\outputs\\test_video /workspace/outputs/banks ns-process-data video --data /workspace/raw_data/IMG_6070.MOV --output-dir /workspace/outputs/banks","title":"Example"},{"location":"nerf/#exporting-results","text":"","title":"Exporting Results"},{"location":"nerf/#kiri-engine","text":"","title":"KIRI Engine"},{"location":"new-macbook/","text":"Install XCode sudo xcode-select --install Install Brew. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Brew Services brew install tree wget vim fig git htop imagemagick ffmpeg tmux brew install --cask iterm2 visual-studio-code Install ZSH. sudo apt install zsh-autosuggestions zsh-syntax-highlighting zsh Install Oh my ZSH. sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" iTerm2 Settings Preferences > Profiles > Keys > Presets > Natural Text Editing Install Python Dev Environment Install Anaconda curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh sh Miniconda3-latest-MacOSX-arm64.sh Initialize on Terminal if needed conda init source ~/.zshrc Install popular libraries python -m pip install --upgrade pip pip install pandas numpy matplotlib seaborn scikit-learn requests PyTorch Env Create environment for PyTorch conda create --name torchenv python=3.9 activate torchenv Install Dependencies brew install gcc conda install astunparse numpy ninja pyyaml setuptools cmake cffi typing_extensions future six requests dataclasses conda install pkg-config libuv MPS acceleration is available on MacOS 12.3+ conda install pytorch torchvision torchaudio -c pytorch-nightly if you get error conda install pytorch -c pytorch-nightly pip install --pre torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu Check if everyting is okay python import torch; torch.backends.mps.is_available() # True","title":"New Macbook Installation"},{"location":"new-macbook/#install-xcode","text":"sudo xcode-select --install","title":"Install XCode"},{"location":"new-macbook/#install-brew","text":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"","title":"Install Brew."},{"location":"new-macbook/#brew-services","text":"brew install tree wget vim fig git htop imagemagick ffmpeg tmux brew install --cask iterm2 visual-studio-code","title":"Brew Services"},{"location":"new-macbook/#install-zsh","text":"sudo apt install zsh-autosuggestions zsh-syntax-highlighting zsh","title":"Install ZSH."},{"location":"new-macbook/#install-oh-my-zsh","text":"sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"","title":"Install Oh my ZSH."},{"location":"new-macbook/#iterm2-settings","text":"Preferences > Profiles > Keys > Presets > Natural Text Editing","title":"iTerm2 Settings"},{"location":"new-macbook/#install-python-dev-environment","text":"Install Anaconda curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh sh Miniconda3-latest-MacOSX-arm64.sh Initialize on Terminal if needed conda init source ~/.zshrc Install popular libraries python -m pip install --upgrade pip pip install pandas numpy matplotlib seaborn scikit-learn requests","title":"Install Python Dev Environment"},{"location":"new-macbook/#pytorch-env","text":"Create environment for PyTorch conda create --name torchenv python=3.9 activate torchenv Install Dependencies brew install gcc conda install astunparse numpy ninja pyyaml setuptools cmake cffi typing_extensions future six requests dataclasses conda install pkg-config libuv MPS acceleration is available on MacOS 12.3+ conda install pytorch torchvision torchaudio -c pytorch-nightly if you get error conda install pytorch -c pytorch-nightly pip install --pre torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu Check if everyting is okay python import torch; torch.backends.mps.is_available() # True","title":"PyTorch Env"},{"location":"openpose/","text":"Openpose Coming soon...","title":"OpenPose"},{"location":"openpose/#openpose","text":"","title":"Openpose"},{"location":"openpose/#coming-soon","text":"","title":"Coming soon..."},{"location":"portfolio/","text":"Hey Cobanov Chrome Little Girls Women Cartoon Concept Art Cosmic People Line-art WLOP Coral & Glacier","title":"Hey"},{"location":"portfolio/#hey","text":"","title":"Hey"},{"location":"portfolio/#cobanov","text":"","title":"Cobanov"},{"location":"portfolio/#chrome","text":"","title":"Chrome"},{"location":"portfolio/#little-girls","text":"","title":"Little Girls"},{"location":"portfolio/#women","text":"","title":"Women"},{"location":"portfolio/#cartoon","text":"","title":"Cartoon"},{"location":"portfolio/#concept-art","text":"","title":"Concept Art"},{"location":"portfolio/#cosmic-people","text":"","title":"Cosmic People"},{"location":"portfolio/#line-art","text":"","title":"Line-art"},{"location":"portfolio/#wlop","text":"","title":"WLOP"},{"location":"portfolio/#coral-glacier","text":"","title":"Coral &amp; Glacier"},{"location":"python-conf/","text":"Source : https://whalesalad.com/blog/doing-python-configuration-right Doing Python Configuration Right Let's talk about configuring Python applications, specifically the kind that might live in multiple environments \u2013 dev, stage, production, etc... The tools and frameworks used in the application are not super important because the approach that I will outline below is based on vanilla Python. The impetus for this approach was caused by frustration with Django's settings , but this is my go-to for any kind of Python application I might be working on. Recap: Python Modules & Packages One of my favorite Python features is the way that the files and directories your application is made of map one-to-one with how you import and use them in code. For example, given this import statement: from app.utils import numbers We can infer the following directory structure: app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 services.py \u251c\u2500\u2500 ... \u2514\u2500\u2500 utils \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 numbers.py Lots of languages and frameworks rely on this novel concept, including Clojure and ES6. In our example, Python considers the utils directory a Package . A directory becomes a package as soon as you place an empty __init__.py inside of it. A common scenario you might encounter as a Python hacker is one where you have a utils.py file that eventually gets too large, so you break it out into a utils/ directory containing many smaller files. When met with this situation we might do the following: # Create a new package: mkdir utils && touch utils/__init__.py # Move our existing code into the new package mv utils.py utils/something.py So now we've seen that a Python package is decided by the existence of an empty __init__.py file in a directory... but what if the file isn't empty ? Putting Code in __init__.py Since it's just a regular old Python file, you can actually put whatever you want there and it will be executed the first time the package is imported. You can test this out on your own. Create a directory named foo and give it an empty __init__.py file. From a Python REPL in the same directory: Seeing no output here is good, it means the statement was successful. Now let's edit our __init__.py file to include the following code: sys.exit() is typically used to cause a process to exit with a specific status . Rerunning the same experiment in a new REPL you will observe that your Python shell immediately exits after the import. In a larger application the effect would be more pronounced: the whole application would exit. So we understand the fundamentals and we've seen how this feature can be used maliciously. Perhaps we can use it for good? Multiple Environments & Twelve-Factor Apps It's likely that your application has lived in multiple environments. Your local development environment is likely the first, and you might have a test environment that lives on Jenkins or another CI platform. Your code is deployed to a production or live environment. Some systems might have a staging environment that is used just before things go live. Even if you only consider yourself a hobbyist, developing code locally and deploying it to a VPS or Heroku-like platform means you're dealing with multiple environments. A rule I follow when building applications is that I should be able to deploy a codebase \u2013 without modification \u2013 into any environment , assuming we have a way to tell the system where it's running. Contrast this to building multiple artifacts for each deployment target, requiring additional time and complexity to build and persist. These artifacts are typically designed to run in a single target environment, so running them locally or in a test mode is often difficult or impossible. The famous twelve-factor methodology shares this belief, in addition to the idea that all configuration should exist as environment variables, too. I agree with this to an extent, but there is sometimes a tendency to make everything an environment variable which quickly becomes difficult to support. If every knob and dial of your system is an environment variable, you'll find that you end up keeping various permutations of variables stored somewhere for running or debugging. See the problem here? We've pulled config out of one area (the code, something that is typically kept in version control) and moved them to an area that is more prone to error and human mistakes. The general guidelines I use to decide where to draw the line: Static things that don't change often, or things that dramatically influence the behavior of the system should live in the code. Dynamic things that change frequently, or things that should be kept secret (API keys/credentials) should live outside the code. How do we Switch Environments? In order for an application to change its behavior between environments we need a way to tell it where it is running. Leaning on environment variables (see a pattern?), I tend to use ENV (or a variation) for this purpose. The Ruby/Rails ecosystem uses RACK_ENV or RAILS_ENV Javascript projects will oftentimes leverage NODE_ENV I recently completed a project for a client with the following convention: My local development environment does not set an ENV variable, so the system infers development by default. The test environment on AWS CodePipeline uses ENV=test The production environment on EC2 uses ENV=production Note: It's important to consider the consequences of not setting this variable. Could that be catastrophic? For instance, could the app boot in DEV mode inside of a production cluster and end up showing tracebacks to the public? For some applications, the default should be production. There is no right or wrong answer here, but it needs to be considered. The End Goal From a developer standpoint we want to access our config like so: from service.config import AWS_S3_BUCKET The import line above doesn't contain anything that would suggest which environment we are in. We don't see the word development or production anywhere. Instead, we just import what we need and allow the configuration system to decide where that comes from. We're leveraging the filesystem and the language itself to provide an API for reading configuration. Behind the curtain, this is what the config directory looks like on disk: service/config \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 common.py \u2514\u2500\u2500 environments \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 development.py \u251c\u2500\u2500 production.py \u2514\u2500\u2500 staging.py common.py contains all of our common or shared configuration. These are things that don't significantly differ from one environment to the next. You could call this base or shared if you'd like. environments/development.py contains development configuration. This file could be excluded from version control so that each developer on the team can implement his or her own configuration settings. environments/(production|staging).py include configuration unique to each of their respective environments. Let's take a look inside common.py : import os APP_NAME = \"My Application\" # Conveniences to always have a quick reference to the # top-level application directory. ROOT_DIR = os.path.join( os.path.dirname(os.path.realpath(__file__)), os.pardir, os.pardir, ) SERVICE_DIR = os.path.join(ROOT_DIR, \"service\") # Used in DNS lookup jobs. DEFAULT_NAMESERVERS = [ \"1.1.1.1\", \"1.0.0.1\" ] # Job runner behaviors JOB_SUPERVISOR_SLEEP_SECONDS = 1 JOB_STATUS_TTL = 10 # AWS Configuration AWS_DYNAMO_REGION = 'us-west-1' AWS_DYNAMO_TABLE_PREFIX = 'acme-' AWS_S3_BUCKET = 'acme-production' SYSTEM_REBOOT_COMMAND = \"sudo systemctl restart foo.service\" This is a contrived example so don't read too deeply into the specifics. The important thing to notice is that this is fairly static configuration that is not going to change very often. Now let's look at environment/development.py : from ..common import * AWS_DYNAMO_TABLE_PREFIX = 'acme-dev-mwhalen-' AWS_S3_BUCKET = 'acme-dev-mwhalen' GOOGLE_CLIENT_ID = \"XXXX\" GOOGLE_CLIENT_SECRET = \"XXXX\" GOOGLE_CLIENT_REFRESH_TOKEN = \"XXXX\" # We're inserting our own DNS servers to the front of the defaults. DEFAULT_NAMESERVERS = [ \"10.0.0.3\" ] + DEFAULT_NAMESERVERS # This is intentionally a no-op command. # Our specific application is designed to be supervised by systemd, # but this is not available on macOS. SYSTEM_REBOOT_COMMAND = \"uname -a\" We start by importing the common configuration so that we inherit all of the common configuration by default. Now we have the ability to add, replace or augment parameters without the need to copy-paste from the parent. To support local development, I can customize the AWS resources being used in my environment. The rest of the system is unchanged, but now my local system is using my own tables in Dynamo as well as my own S3 bucket. Because this file is not in version control I can confidently store secrets such as my own GOOGLE_CLIENT_ credentials. Because there is access to the common DEFAULT_NAMESERVERS I have the ability extend them versus copy-pasting whatever the common values are into my own configuration. In production systemd commands are used to restart the application in response to certain admin actions. Because my Mac doesn't have systemd , I avoid that problem entirely by replacing the system reboot command with a simple no-op. How it Works Circling back to our config/__init__.py file, what could we implement here to make this possible? It's actually quite straightforward: import os import importlib # Determine the environment we want to load, default is development.py ENV = os.environ.get(\"ENV\", \"development\") module = importlib.import_module( f\".environments.{ENV}\", package=\"service.config\" ) # update globals of this module (i.e. settings) with imported. globals().update(vars(module)) def is_development_env(): return ENV == \"development\" def is_production_env(): return ENV == \"production\" We're leveraging import-time evaluation to dynamically fetch the necessary configuration from the corresponding child environment. Let's step through it piece by piece: First we import the importlib module ( docs ) which gives us some handy tools for importing code with code. Using the convention we established \u2013 the ENV environment variable \u2013 we grab the name of the environment we're currently running in. We choose development as the default if one is not set, but as noted earlier this decision will vary depending on the system. We might even consider preventing our application from starting unless this variable is defined. Here is an example of how that could work: ``` ENV = os.environ.get(\"ENV\", None) if ENV is None: raise Exception(\"The ENV environment variable must be set!\") ``` Next we use the importlib.import_module function to load the module containing our specific environment's code into a local variable, module . Finally, we update the globals of this module merging in the ones from the development.py file. At the end you will see a few conveniences (a-la Rails) to make it easier to toggle specific logic based on the environment. These are kept as functions so that they isolate implementation to this module instead of wherever its being used. This approach was heavily inspired by Ruby on Rails configuration which achieves a very similar outward appearance albeit with a different under-the-hood implementation. A Real World Example To provide another example of this in action, below is the configuration for this website: First, here is the exact directory structure of my config directory: config \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 base.py \u2514\u2500\u2500 environments \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 development.py \u251c\u2500\u2500 production.py \u2514\u2500\u2500 test.py development.py is used locally production.py is used on Heroku test.py is used for local unit tests with pytest # config/environments/base.py import os import logging import pytz LOG_FORMAT = '[%(asctime)s] [%(levelname)s] [%(name)s] %(message)s' ROOT_DIR = os.path.join( os.path.dirname(os.path.realpath(__file__)), os.pardir, os.pardir ) SYSTEM_DIR = os.path.join(ROOT_DIR, 'system') BLOG_DIR = os.path.join(ROOT_DIR, 'blog') SASS_DIR = os.path.join(ROOT_DIR, 'static', 'sass') TZ = pytz.timezone('America/Los_Angeles') def relative_to_root(path): return os.path.abspath(os.path.join(ROOT_DIR, path)) DEFAULT_SITE_TITLE = 'Michael Whalen \u2013 whalesalad.com' base.py contains fairly static configuration: A centralized log format to use elsewhere in the project. Common directories and a helper function to make path-related work easier. The timezone for my service. The default title to use when a page doesn't provide it's own. # config/environments/development.py import os from ..base import * DEFAULT_SITE_TITLE = f'[DEV] {DEFAULT_SITE_TITLE}' REDIS = { 'host': os.environ.get('REDIS_HOST', 'localhost'), 'port': os.environ.get('REDIS_PORT', 6379), 'db': os.environ.get('REDIS_DB', 0), 'socket_timeout': 120 } In development.py , the site title is overridden so while I am editing I know I am looking at a local copy. I also define some local Redis configuration that differs greatly from Production. # config/environments/production.py import os from ..base import * SENTRY_DSN = \"https://*******@sentry.io/*******\" REDIS = { 'url': os.environ.get('REDIS_URL') } SENTRY_DSN is only defined in production.py and not in the base or any other environments. This is to prevent Sentry (centralized error logs) from becoming activated in dev or test situations. On Heroku the Redis connection details come from a URL, so that is configured here. Finally, to demonstrate how this is used elsewhere in the app, take a look at how Redis connections are built: from redis import ConnectionPool from redis import Redis as R from system import config class RedisManager(object): @classmethod def from_config(cls, redis_config): if 'url' in redis_config: pool = ConnectionPool.from_url(redis_config['url']) else: pool = ConnectionPool(**redis_config) return cls(connection_pool=pool) def __init__(self, connection_pool): self.pool = connection_pool def get_connection(self): return R(connection_pool=self.pool) conn = property(get_connection) Redis = RedisManager.from_config(config.REDIS) Notice the last line: RedisManager.from_config() is used to isolate concerns. The rest of RedisManager doesn't know what the shape of the data in config looks like and shouldn't have to. This is one of the handoff points between the configuration layer and the rest of the system. Closing Thoughts I use this approach in all of my Python projects and have yet to find a situation where this (or a variation of it) doesn't work. We have the flexibility to create an unlimited number of environments. If for example we wanted to spin-up a temporary environment for a pull request: cp environments/staging.py environments/PR_402.py and ENV=PR_402 is all you need. When developing locally we can run the system in production mode by prefixing it with ENV=production and vice versa, running software anywhere else in a dev or test mode. Developers can quickly glean the major differences between environments by taking a look at the configuration each of them is overriding. This makes it easier to onboard new team members to your codebase. Similarly, each developer on the team can have his or her own unique configuration. No more clobbering central config because your system has something setup a little differently than the others. We can protect our test environment from accidentally reaching out to production resources by explicitly setting certain variables in environments/test.py to None . We eliminate the heft of passing big key/val configuration maps between various CLI tools such as Docker et-all (although tooling more and more capable of reading env from a file these days) We expose our configuration as a vanilla Python package so there is little to no learning curve and interoperability with other Python tools. We avoid the cost of supporting external libraries/dependencies At the end of the day this approach is not very glamorous, and that is exactly what we want when we're building systems that need to be reliable, maintainable and efficient. With some plain old Python and a few lines of special code we've unlocked a tremendous amount of flexibility and power in the configuration of our system. Did you find this useful? Consider following @whalesalad on Twitter so you don't miss out on other techniques for building better software .","title":"Doing Python Configuration Right"},{"location":"python-conf/#doing-python-configuration-right","text":"Let's talk about configuring Python applications, specifically the kind that might live in multiple environments \u2013 dev, stage, production, etc... The tools and frameworks used in the application are not super important because the approach that I will outline below is based on vanilla Python. The impetus for this approach was caused by frustration with Django's settings , but this is my go-to for any kind of Python application I might be working on.","title":"Doing Python Configuration Right"},{"location":"python-conf/#recap-python-modules-packages","text":"One of my favorite Python features is the way that the files and directories your application is made of map one-to-one with how you import and use them in code. For example, given this import statement: from app.utils import numbers We can infer the following directory structure: app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 services.py \u251c\u2500\u2500 ... \u2514\u2500\u2500 utils \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 numbers.py Lots of languages and frameworks rely on this novel concept, including Clojure and ES6. In our example, Python considers the utils directory a Package . A directory becomes a package as soon as you place an empty __init__.py inside of it. A common scenario you might encounter as a Python hacker is one where you have a utils.py file that eventually gets too large, so you break it out into a utils/ directory containing many smaller files. When met with this situation we might do the following: # Create a new package: mkdir utils && touch utils/__init__.py # Move our existing code into the new package mv utils.py utils/something.py So now we've seen that a Python package is decided by the existence of an empty __init__.py file in a directory... but what if the file isn't empty ?","title":"Recap: Python Modules &amp; Packages"},{"location":"python-conf/#putting-code-in-__init__py","text":"Since it's just a regular old Python file, you can actually put whatever you want there and it will be executed the first time the package is imported. You can test this out on your own. Create a directory named foo and give it an empty __init__.py file. From a Python REPL in the same directory: Seeing no output here is good, it means the statement was successful. Now let's edit our __init__.py file to include the following code: sys.exit() is typically used to cause a process to exit with a specific status . Rerunning the same experiment in a new REPL you will observe that your Python shell immediately exits after the import. In a larger application the effect would be more pronounced: the whole application would exit. So we understand the fundamentals and we've seen how this feature can be used maliciously. Perhaps we can use it for good?","title":"Putting Code in __init__.py"},{"location":"python-conf/#multiple-environments-twelve-factor-apps","text":"It's likely that your application has lived in multiple environments. Your local development environment is likely the first, and you might have a test environment that lives on Jenkins or another CI platform. Your code is deployed to a production or live environment. Some systems might have a staging environment that is used just before things go live. Even if you only consider yourself a hobbyist, developing code locally and deploying it to a VPS or Heroku-like platform means you're dealing with multiple environments. A rule I follow when building applications is that I should be able to deploy a codebase \u2013 without modification \u2013 into any environment , assuming we have a way to tell the system where it's running. Contrast this to building multiple artifacts for each deployment target, requiring additional time and complexity to build and persist. These artifacts are typically designed to run in a single target environment, so running them locally or in a test mode is often difficult or impossible. The famous twelve-factor methodology shares this belief, in addition to the idea that all configuration should exist as environment variables, too. I agree with this to an extent, but there is sometimes a tendency to make everything an environment variable which quickly becomes difficult to support. If every knob and dial of your system is an environment variable, you'll find that you end up keeping various permutations of variables stored somewhere for running or debugging. See the problem here? We've pulled config out of one area (the code, something that is typically kept in version control) and moved them to an area that is more prone to error and human mistakes. The general guidelines I use to decide where to draw the line: Static things that don't change often, or things that dramatically influence the behavior of the system should live in the code. Dynamic things that change frequently, or things that should be kept secret (API keys/credentials) should live outside the code.","title":"Multiple Environments &amp; Twelve-Factor Apps"},{"location":"python-conf/#how-do-we-switch-environments","text":"In order for an application to change its behavior between environments we need a way to tell it where it is running. Leaning on environment variables (see a pattern?), I tend to use ENV (or a variation) for this purpose. The Ruby/Rails ecosystem uses RACK_ENV or RAILS_ENV Javascript projects will oftentimes leverage NODE_ENV I recently completed a project for a client with the following convention: My local development environment does not set an ENV variable, so the system infers development by default. The test environment on AWS CodePipeline uses ENV=test The production environment on EC2 uses ENV=production Note: It's important to consider the consequences of not setting this variable. Could that be catastrophic? For instance, could the app boot in DEV mode inside of a production cluster and end up showing tracebacks to the public? For some applications, the default should be production. There is no right or wrong answer here, but it needs to be considered.","title":"How do we Switch Environments?"},{"location":"python-conf/#the-end-goal","text":"From a developer standpoint we want to access our config like so: from service.config import AWS_S3_BUCKET The import line above doesn't contain anything that would suggest which environment we are in. We don't see the word development or production anywhere. Instead, we just import what we need and allow the configuration system to decide where that comes from. We're leveraging the filesystem and the language itself to provide an API for reading configuration. Behind the curtain, this is what the config directory looks like on disk: service/config \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 common.py \u2514\u2500\u2500 environments \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 development.py \u251c\u2500\u2500 production.py \u2514\u2500\u2500 staging.py common.py contains all of our common or shared configuration. These are things that don't significantly differ from one environment to the next. You could call this base or shared if you'd like. environments/development.py contains development configuration. This file could be excluded from version control so that each developer on the team can implement his or her own configuration settings. environments/(production|staging).py include configuration unique to each of their respective environments. Let's take a look inside common.py : import os APP_NAME = \"My Application\" # Conveniences to always have a quick reference to the # top-level application directory. ROOT_DIR = os.path.join( os.path.dirname(os.path.realpath(__file__)), os.pardir, os.pardir, ) SERVICE_DIR = os.path.join(ROOT_DIR, \"service\") # Used in DNS lookup jobs. DEFAULT_NAMESERVERS = [ \"1.1.1.1\", \"1.0.0.1\" ] # Job runner behaviors JOB_SUPERVISOR_SLEEP_SECONDS = 1 JOB_STATUS_TTL = 10 # AWS Configuration AWS_DYNAMO_REGION = 'us-west-1' AWS_DYNAMO_TABLE_PREFIX = 'acme-' AWS_S3_BUCKET = 'acme-production' SYSTEM_REBOOT_COMMAND = \"sudo systemctl restart foo.service\" This is a contrived example so don't read too deeply into the specifics. The important thing to notice is that this is fairly static configuration that is not going to change very often. Now let's look at environment/development.py : from ..common import * AWS_DYNAMO_TABLE_PREFIX = 'acme-dev-mwhalen-' AWS_S3_BUCKET = 'acme-dev-mwhalen' GOOGLE_CLIENT_ID = \"XXXX\" GOOGLE_CLIENT_SECRET = \"XXXX\" GOOGLE_CLIENT_REFRESH_TOKEN = \"XXXX\" # We're inserting our own DNS servers to the front of the defaults. DEFAULT_NAMESERVERS = [ \"10.0.0.3\" ] + DEFAULT_NAMESERVERS # This is intentionally a no-op command. # Our specific application is designed to be supervised by systemd, # but this is not available on macOS. SYSTEM_REBOOT_COMMAND = \"uname -a\" We start by importing the common configuration so that we inherit all of the common configuration by default. Now we have the ability to add, replace or augment parameters without the need to copy-paste from the parent. To support local development, I can customize the AWS resources being used in my environment. The rest of the system is unchanged, but now my local system is using my own tables in Dynamo as well as my own S3 bucket. Because this file is not in version control I can confidently store secrets such as my own GOOGLE_CLIENT_ credentials. Because there is access to the common DEFAULT_NAMESERVERS I have the ability extend them versus copy-pasting whatever the common values are into my own configuration. In production systemd commands are used to restart the application in response to certain admin actions. Because my Mac doesn't have systemd , I avoid that problem entirely by replacing the system reboot command with a simple no-op.","title":"The End Goal"},{"location":"python-conf/#how-it-works","text":"Circling back to our config/__init__.py file, what could we implement here to make this possible? It's actually quite straightforward: import os import importlib # Determine the environment we want to load, default is development.py ENV = os.environ.get(\"ENV\", \"development\") module = importlib.import_module( f\".environments.{ENV}\", package=\"service.config\" ) # update globals of this module (i.e. settings) with imported. globals().update(vars(module)) def is_development_env(): return ENV == \"development\" def is_production_env(): return ENV == \"production\" We're leveraging import-time evaluation to dynamically fetch the necessary configuration from the corresponding child environment. Let's step through it piece by piece: First we import the importlib module ( docs ) which gives us some handy tools for importing code with code. Using the convention we established \u2013 the ENV environment variable \u2013 we grab the name of the environment we're currently running in. We choose development as the default if one is not set, but as noted earlier this decision will vary depending on the system. We might even consider preventing our application from starting unless this variable is defined. Here is an example of how that could work: ``` ENV = os.environ.get(\"ENV\", None) if ENV is None: raise Exception(\"The ENV environment variable must be set!\") ``` Next we use the importlib.import_module function to load the module containing our specific environment's code into a local variable, module . Finally, we update the globals of this module merging in the ones from the development.py file. At the end you will see a few conveniences (a-la Rails) to make it easier to toggle specific logic based on the environment. These are kept as functions so that they isolate implementation to this module instead of wherever its being used. This approach was heavily inspired by Ruby on Rails configuration which achieves a very similar outward appearance albeit with a different under-the-hood implementation.","title":"How it Works"},{"location":"python-conf/#a-real-world-example","text":"To provide another example of this in action, below is the configuration for this website: First, here is the exact directory structure of my config directory: config \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 base.py \u2514\u2500\u2500 environments \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 development.py \u251c\u2500\u2500 production.py \u2514\u2500\u2500 test.py development.py is used locally production.py is used on Heroku test.py is used for local unit tests with pytest # config/environments/base.py import os import logging import pytz LOG_FORMAT = '[%(asctime)s] [%(levelname)s] [%(name)s] %(message)s' ROOT_DIR = os.path.join( os.path.dirname(os.path.realpath(__file__)), os.pardir, os.pardir ) SYSTEM_DIR = os.path.join(ROOT_DIR, 'system') BLOG_DIR = os.path.join(ROOT_DIR, 'blog') SASS_DIR = os.path.join(ROOT_DIR, 'static', 'sass') TZ = pytz.timezone('America/Los_Angeles') def relative_to_root(path): return os.path.abspath(os.path.join(ROOT_DIR, path)) DEFAULT_SITE_TITLE = 'Michael Whalen \u2013 whalesalad.com' base.py contains fairly static configuration: A centralized log format to use elsewhere in the project. Common directories and a helper function to make path-related work easier. The timezone for my service. The default title to use when a page doesn't provide it's own. # config/environments/development.py import os from ..base import * DEFAULT_SITE_TITLE = f'[DEV] {DEFAULT_SITE_TITLE}' REDIS = { 'host': os.environ.get('REDIS_HOST', 'localhost'), 'port': os.environ.get('REDIS_PORT', 6379), 'db': os.environ.get('REDIS_DB', 0), 'socket_timeout': 120 } In development.py , the site title is overridden so while I am editing I know I am looking at a local copy. I also define some local Redis configuration that differs greatly from Production. # config/environments/production.py import os from ..base import * SENTRY_DSN = \"https://*******@sentry.io/*******\" REDIS = { 'url': os.environ.get('REDIS_URL') } SENTRY_DSN is only defined in production.py and not in the base or any other environments. This is to prevent Sentry (centralized error logs) from becoming activated in dev or test situations. On Heroku the Redis connection details come from a URL, so that is configured here. Finally, to demonstrate how this is used elsewhere in the app, take a look at how Redis connections are built: from redis import ConnectionPool from redis import Redis as R from system import config class RedisManager(object): @classmethod def from_config(cls, redis_config): if 'url' in redis_config: pool = ConnectionPool.from_url(redis_config['url']) else: pool = ConnectionPool(**redis_config) return cls(connection_pool=pool) def __init__(self, connection_pool): self.pool = connection_pool def get_connection(self): return R(connection_pool=self.pool) conn = property(get_connection) Redis = RedisManager.from_config(config.REDIS) Notice the last line: RedisManager.from_config() is used to isolate concerns. The rest of RedisManager doesn't know what the shape of the data in config looks like and shouldn't have to. This is one of the handoff points between the configuration layer and the rest of the system.","title":"A Real World Example"},{"location":"python-conf/#closing-thoughts","text":"I use this approach in all of my Python projects and have yet to find a situation where this (or a variation of it) doesn't work. We have the flexibility to create an unlimited number of environments. If for example we wanted to spin-up a temporary environment for a pull request: cp environments/staging.py environments/PR_402.py and ENV=PR_402 is all you need. When developing locally we can run the system in production mode by prefixing it with ENV=production and vice versa, running software anywhere else in a dev or test mode. Developers can quickly glean the major differences between environments by taking a look at the configuration each of them is overriding. This makes it easier to onboard new team members to your codebase. Similarly, each developer on the team can have his or her own unique configuration. No more clobbering central config because your system has something setup a little differently than the others. We can protect our test environment from accidentally reaching out to production resources by explicitly setting certain variables in environments/test.py to None . We eliminate the heft of passing big key/val configuration maps between various CLI tools such as Docker et-all (although tooling more and more capable of reading env from a file these days) We expose our configuration as a vanilla Python package so there is little to no learning curve and interoperability with other Python tools. We avoid the cost of supporting external libraries/dependencies At the end of the day this approach is not very glamorous, and that is exactly what we want when we're building systems that need to be reliable, maintainable and efficient. With some plain old Python and a few lines of special code we've unlocked a tremendous amount of flexibility and power in the configuration of our system. Did you find this useful? Consider following @whalesalad on Twitter so you don't miss out on other techniques for building better software .","title":"Closing Thoughts"},{"location":"windows-wsl-ssh/","text":"Step 1. Enable WSL on Windows Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Step 2. Install Linux Distro curl.exe -L -o ubuntu-2004.appx https://aka.ms/wslubuntu2004 Rename-Item ubuntu-2004.appx ubuntu-2004.zip Expand-Archive ubuntu-2004.zip ubuntu2004 Step 3. Set the Path Environment Variable $userenv = [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")[System.Environment]::SetEnvironmentVariable(\"PATH\", $userenv + \"C:\\Users\\Administrator\\ubuntu2004\", \"User\") Step 4. Enable SSH on Windows Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 Set-Service -Name ssh-agent -StartupType 'Automatic' Set-Service -Name sshd -StartupType 'Automatic' Get-Service ssh* | Start-Service Step 5. Set default SSH Shell New-ItemProperty -Path \"HKLM:\\SOFTWARE\\OpenSSH\" -Name DefaultShell -Value \"C:\\WINDOWS\\System32\\bash.exe\" -PropertyType String -Force","title":"Windows WSL Activate SSH"},{"location":"windows-wsl-ssh/#step-1-enable-wsl-on-windows","text":"Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux","title":"Step 1. Enable WSL on Windows"},{"location":"windows-wsl-ssh/#step-2-install-linux-distro","text":"curl.exe -L -o ubuntu-2004.appx https://aka.ms/wslubuntu2004 Rename-Item ubuntu-2004.appx ubuntu-2004.zip Expand-Archive ubuntu-2004.zip ubuntu2004","title":"Step 2. Install Linux Distro"},{"location":"windows-wsl-ssh/#step-3-set-the-path-environment-variable","text":"$userenv = [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")[System.Environment]::SetEnvironmentVariable(\"PATH\", $userenv + \"C:\\Users\\Administrator\\ubuntu2004\", \"User\")","title":"Step 3. Set the Path Environment Variable"},{"location":"windows-wsl-ssh/#step-4-enable-ssh-on-windows","text":"Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 Set-Service -Name ssh-agent -StartupType 'Automatic' Set-Service -Name sshd -StartupType 'Automatic' Get-Service ssh* | Start-Service","title":"Step 4. Enable SSH on Windows"},{"location":"windows-wsl-ssh/#step-5-set-default-ssh-shell","text":"New-ItemProperty -Path \"HKLM:\\SOFTWARE\\OpenSSH\" -Name DefaultShell -Value \"C:\\WINDOWS\\System32\\bash.exe\" -PropertyType String -Force","title":"Step 5. Set default SSH Shell"},{"location":"archive/dreambooth-rehberi/","text":"Dreambooth Extension for Stable-Diffusion-WebUI This is a WIP port of Shivam Shriao's Diffusers Repo , which is a modified version of the default Huggingface Diffusers Repo optimized for better performance on lower-VRAM GPUs. It also adds several other features, including training multiple concepts simultaneously, and (Coming soon) Inpainting training. Installation To install, simply go to the \"Extensions\" tab in the SD Web UI, select the \"Available\" sub-tab, pick \"Load from:\" to load the list of extensions, and finally, click \"install\" next to the Dreambooth entry. For 8bit adam to run properly, it may be necessary to install the CU116 version of torch and torchvision, which can be accomplished below: Refer to the appropriate script below for extra flags to install requirements: https://github.com/d8ahazard/sd_dreambooth_extension/blob/main/webui-user-dreambooth.bat https://github.com/d8ahazard/sd_dreambooth_extension/blob/main/webui-user-dreambooth.sh Setting the torch command to: TORCH_COMMAND=pip install torch==1.12.1+cu116 torchvision==0.13.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 will ensure that the proper torch version is installed when webui-user is executed, and then left alone after that, versus trying to install conflicting versions. We also need a newer version of diffusers, as SD-WebUI uses version 0.3.0, while DB training requires > 0.6.0, so we use 0.7.2. Not having the right diffusers version is the cause of the 'UNet2DConditionModel' object has no attribute 'enable_gradient_checkpointing' error message, as well as safety checker warnings. To force sd-web-ui to only install one set of requirements, we can specify the command line argument: set/export REQS_FILE=.\\extensions\\sd_dreambooth_extension\\requirements.txt And last, if you wish to completely skip the \"native\" install routine of Dreambooth, you can set the following environment flag: DREAMBOOTH_SKIP_INSTALL=True This is ideal for \"offline mode\", where you don't want the script to constantly check things from pypi. After installing via the WebUI, it is recommended to set the above flags and re-launch the entire Stable-diffusion-webui, not just reload it. Usage Create a Model Go to the Dreambooth tab. Under the \"Create Model\" sub-tab, enter a new model name and select the source checkpoint to train from. The source checkpoint will be extracted to models\\dreambooth\\MODELNAME\\working - the original will not be touched. 2b. Optionally, you can also specify a huggingface model directory and token to create the Dreambooth dataset from huggingface.co. Model path format should be like so: 'runwayml/stable-diffusion-v1-5' Click \"Create\". This will take a minute or two, but when done, the UI should indicate that a new model directory has been set up. Training (Basic Settings) After creating a new model, select the new model name from the \"Model\" dropdown at the very top. Select the \"Train Model\" sub-tab. Fill in the paramters as described below: Concepts List - The path to a JSON file or a JSON string containing multiple concepts. See here for an example. If a concepts list is specified, then the instance prompt, class prompt, instance data dir, and class data dir fields will be ignored. Instance Prompt - A short descriptor of your subject using a UNIQUE keyword and a classifier word. If training a dog, your instance prompt could be \"photo of zkz dog\". The key here is that \"zkz\" is not a word that might overlap with something in the real world \"fluff\", and \"dog\" is a generic word to describe your subject. This is only necessary if using prior preservation. You can use [filewords] as placeholder for reading caption from the image filename or a seprarte .txt file containing caption, for example, [filewords], in the style of zymkyr . This syntax is the same as textual inversion templates. Class Prompt - A keyword indicating what type of \"thing\" your subject is. If your instance prompt is \"photo of zkz dog\", your class prompt would be \"photo of a dog\". Leave this blank to disable prior preservation training. Dataset Directory - The path to the directory where the images described in Instance Prompt are kept. REQUIRED Classification dataset directory - The path to the directory where the images described in Class Prompt are kept. If a class prompt is specified and this is left blank, images will be generated to /models/dreambooth/MODELNAME/classifiers/ Total number of classification images to use - Leave at 0 to disable prior preservation. For best results you want ~n*10 classification images - so if you have 40 training photos, then set this to 400. This is just a guess. Training steps - How many total training steps to complete. According to this guide , you should train for appx 100 steps per sample image. So, if you have 40 instance/sample images, you would train for 4k steps. This is, of course, a rough approximation, and other values will have an effect on final output fidelity. Batch size - How many training steps to process simultaneously. You probably want to leave this at 1. Class batch size - How many classification images to generate simultaneously. Set this to whatever you can safely process at once using Txt2Image, or just leave it alone. Learning rate - You probably don't want to touch this. Resolution - The resolution to train images at. You probably want to keep this number at 512 or lower unless your GPU is insane. Lowering this (and the resolution of training images) may help with lower-VRAM GPUs. Save a checkpoint every N steps - How frequently to save a checkpoint from the trained data. I should probably change the default of this to 1000. Generate a preview image every N steps - How frequently will an image be generated as an example of training progress. Preview image prompt - The prompt to use to generate preview image. Leave blank to use the instance prompt. Preview image negative prompt - Like above, but negative. Leave blank to do nothing. :P Number of samples to generate - Self explainatory? Sample guidance scale - Like CFG Scale in Txt2Image/Img2Img, used for generating preview. Sample steps - Same as sample guidance scale, but the number of steps to run to generate preview. Advanced Settings Use CPU Only - As indicated, this is more of a last resort if you can't get it to train with any other settings. Also, as indicated, it will be abysmally slow. Also, you cannot use 8Bit-Adam with CPU Training, or you'll have a bad time. Don't Cache Latents - Why is this not just called \"cache\" latents? Because that's what the original script uses, and I'm trying to maintain the ability to update this as easily as possible. Anyway...when this box is checked latents will not be cached. When latents are not cached, you will save a bit of VRAM, but train slightly slower. Train Text Encoder - Not required, but recommended. Enabling this will probably cost a bit more VRAM, but also purportedly increase output image fidelity. Use 8Bit Adam - Enable this to save VRAM. Should now work on both windows and Linux without needing WSL. Center Crop - Crop images if they aren't the right dimensions? I don't use this, and I recommend you just crop your images \"right\". Gradient Checkpointing - Enable this to save VRAM at the cost of a bit of speed. Scale Learning Rate - I don't use this, not sure what impact it has on performance or output quality. Mixed Precision - Set to 'fp16' to save VRAM at the cost of speed. Everything after 'Mixed Precision' - Adjust at your own risk. Performance/quality benefits from changing these remain to be tested. The next two were added after I wrote the above bit, so just ignore me being a big liar. Pad Tokens - Pads the text tokens to a longer length for some reason. Max Token Length - raise the tokenizer's default limit above 75. Requires Pad Tokens for > 75. Apply Horizontal Flip - \"Apply horizontal flip augmentation\". Flips images horizontally at random, which can potentially offer better editability? Use EMA for finetuning - Use exponential moving average weight to reduce overfitting during the last iterations. Continuing Training Once a model has been trained for any number of steps, a config file is saved which contains all of the parameters from the UI. If you wish to continue training a model, you can simply select the model name from the dropdown and then click the blue button next to the model name dropdown to load previous parameters. Use DreamBooth to Fine-Tune Stable Diffusion in Google Colab Prepare Images Choosing Images When choosing images, it\u2019s recommended to keep the following in mind to get the best results: Upload a variety of images of your subject. If you\u2019re uploading images of a person, try something like 70% close-ups, 20% from the chest up, 10% full body, so Stable Diffusion also gets some idea of the rest of the subject and not only the face. Try to change things up as much as possible in each picture. This means: Varying the body pose Taking pictures on different days, in different lighting conditions, and with different backgrounds Showing a variety of expressions and emotions When generating new images, whatever you capture will be over-represented. For example, if you take multiple pictures with the same green field behind you, it\u2019s likely that the generated images of you will also contain the green field, even if you want a dystopic background. This can apply to anything, like jewelry, clothes, or even people in the background. If you want to avoid seeing that element in your generated image, make sure not to repeat it in every shot. On the other hand, if you want it in the generated images, make sure it\u2019s in your pictures more often. It\u2019s recommended that you provide ~50 images of what you\u2019d like to train Stable Diffusion on to get great results. However, I\u2019ve only used 20-30 so far, and the results are pretty good. If you\u2019re just starting out and want to test it out, I think 20-30 images should be good enough for now, and you can get 50 images after you\u2019ve seen it work. Resize & Crop to 512 x 512px Once you\u2019ve chosen your images, you should prepare them. First, we need to resize and crop our images to be 512 x 512px. We can easily do this using the website https://birme.net . To do this, just: Visit the website Upload your images Set your dimensions to 512 x 512px Adjust the cropping area to center your subject Click on Save as Zip to download the archive. You can then unzip it on your computer, and we\u2019ll use them a bit later. Birme.net - Resize Images Resizing Images using Birme.net Renaming Your Images We\u2019ll also want to rename our images to contain the subject\u2019s name: Firstly, the subject name should be one unique/random/unknown keyword. This is because Stable Diffusion also has some knowledge of The Sandman from other sources other than the one played by Tom Sturridge and we don\u2019t want it to get confused and make a combination of interpretations of The Sandman. As such, I\u2019ll call it Sandman2022 to make sure it\u2019s unique. Renaming images to subject (1), subject (2) .. subject (30). This is because, using this method, you can train multiple subjects at once. If you want to fine-tune Stable Diffusion with Sandman, your friend Kevin, and your cat, you can give it prepare images for each of them. For the Sandman you\u2019d have Sandman2022 (1), Sandman2022 (2) \u2026 Sandman (30), for Kevin you\u2019d have KevinKevinson2022 (1), KevinKevinson2022 (2) \u2026 KevinKevinson (30), and for your cat you\u2019d have DexterTheCat (1), DexterTheCat (2) \u2026 DexterTheCat(30). Here\u2019s me renaming my images for Sandman2022 in bulk on Windows. Just select them all, right click one of them and click Rename and give it what name you want and click anywhere to finish the renaming. Everything else will be renamed as well.","title":"Dreambooth Extension for Stable-Diffusion-WebUI"},{"location":"archive/dreambooth-rehberi/#dreambooth-extension-for-stable-diffusion-webui","text":"This is a WIP port of Shivam Shriao's Diffusers Repo , which is a modified version of the default Huggingface Diffusers Repo optimized for better performance on lower-VRAM GPUs. It also adds several other features, including training multiple concepts simultaneously, and (Coming soon) Inpainting training.","title":"Dreambooth Extension for Stable-Diffusion-WebUI"},{"location":"archive/dreambooth-rehberi/#installation","text":"To install, simply go to the \"Extensions\" tab in the SD Web UI, select the \"Available\" sub-tab, pick \"Load from:\" to load the list of extensions, and finally, click \"install\" next to the Dreambooth entry. For 8bit adam to run properly, it may be necessary to install the CU116 version of torch and torchvision, which can be accomplished below: Refer to the appropriate script below for extra flags to install requirements: https://github.com/d8ahazard/sd_dreambooth_extension/blob/main/webui-user-dreambooth.bat https://github.com/d8ahazard/sd_dreambooth_extension/blob/main/webui-user-dreambooth.sh Setting the torch command to: TORCH_COMMAND=pip install torch==1.12.1+cu116 torchvision==0.13.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 will ensure that the proper torch version is installed when webui-user is executed, and then left alone after that, versus trying to install conflicting versions. We also need a newer version of diffusers, as SD-WebUI uses version 0.3.0, while DB training requires > 0.6.0, so we use 0.7.2. Not having the right diffusers version is the cause of the 'UNet2DConditionModel' object has no attribute 'enable_gradient_checkpointing' error message, as well as safety checker warnings. To force sd-web-ui to only install one set of requirements, we can specify the command line argument: set/export REQS_FILE=.\\extensions\\sd_dreambooth_extension\\requirements.txt And last, if you wish to completely skip the \"native\" install routine of Dreambooth, you can set the following environment flag: DREAMBOOTH_SKIP_INSTALL=True This is ideal for \"offline mode\", where you don't want the script to constantly check things from pypi. After installing via the WebUI, it is recommended to set the above flags and re-launch the entire Stable-diffusion-webui, not just reload it.","title":"Installation"},{"location":"archive/dreambooth-rehberi/#usage","text":"","title":"Usage"},{"location":"archive/dreambooth-rehberi/#create-a-model","text":"Go to the Dreambooth tab. Under the \"Create Model\" sub-tab, enter a new model name and select the source checkpoint to train from. The source checkpoint will be extracted to models\\dreambooth\\MODELNAME\\working - the original will not be touched. 2b. Optionally, you can also specify a huggingface model directory and token to create the Dreambooth dataset from huggingface.co. Model path format should be like so: 'runwayml/stable-diffusion-v1-5' Click \"Create\". This will take a minute or two, but when done, the UI should indicate that a new model directory has been set up.","title":"Create a Model"},{"location":"archive/dreambooth-rehberi/#training-basic-settings","text":"After creating a new model, select the new model name from the \"Model\" dropdown at the very top. Select the \"Train Model\" sub-tab. Fill in the paramters as described below: Concepts List - The path to a JSON file or a JSON string containing multiple concepts. See here for an example. If a concepts list is specified, then the instance prompt, class prompt, instance data dir, and class data dir fields will be ignored. Instance Prompt - A short descriptor of your subject using a UNIQUE keyword and a classifier word. If training a dog, your instance prompt could be \"photo of zkz dog\". The key here is that \"zkz\" is not a word that might overlap with something in the real world \"fluff\", and \"dog\" is a generic word to describe your subject. This is only necessary if using prior preservation. You can use [filewords] as placeholder for reading caption from the image filename or a seprarte .txt file containing caption, for example, [filewords], in the style of zymkyr . This syntax is the same as textual inversion templates. Class Prompt - A keyword indicating what type of \"thing\" your subject is. If your instance prompt is \"photo of zkz dog\", your class prompt would be \"photo of a dog\". Leave this blank to disable prior preservation training. Dataset Directory - The path to the directory where the images described in Instance Prompt are kept. REQUIRED Classification dataset directory - The path to the directory where the images described in Class Prompt are kept. If a class prompt is specified and this is left blank, images will be generated to /models/dreambooth/MODELNAME/classifiers/ Total number of classification images to use - Leave at 0 to disable prior preservation. For best results you want ~n*10 classification images - so if you have 40 training photos, then set this to 400. This is just a guess. Training steps - How many total training steps to complete. According to this guide , you should train for appx 100 steps per sample image. So, if you have 40 instance/sample images, you would train for 4k steps. This is, of course, a rough approximation, and other values will have an effect on final output fidelity. Batch size - How many training steps to process simultaneously. You probably want to leave this at 1. Class batch size - How many classification images to generate simultaneously. Set this to whatever you can safely process at once using Txt2Image, or just leave it alone. Learning rate - You probably don't want to touch this. Resolution - The resolution to train images at. You probably want to keep this number at 512 or lower unless your GPU is insane. Lowering this (and the resolution of training images) may help with lower-VRAM GPUs. Save a checkpoint every N steps - How frequently to save a checkpoint from the trained data. I should probably change the default of this to 1000. Generate a preview image every N steps - How frequently will an image be generated as an example of training progress. Preview image prompt - The prompt to use to generate preview image. Leave blank to use the instance prompt. Preview image negative prompt - Like above, but negative. Leave blank to do nothing. :P Number of samples to generate - Self explainatory? Sample guidance scale - Like CFG Scale in Txt2Image/Img2Img, used for generating preview. Sample steps - Same as sample guidance scale, but the number of steps to run to generate preview.","title":"Training (Basic Settings)"},{"location":"archive/dreambooth-rehberi/#advanced-settings","text":"Use CPU Only - As indicated, this is more of a last resort if you can't get it to train with any other settings. Also, as indicated, it will be abysmally slow. Also, you cannot use 8Bit-Adam with CPU Training, or you'll have a bad time. Don't Cache Latents - Why is this not just called \"cache\" latents? Because that's what the original script uses, and I'm trying to maintain the ability to update this as easily as possible. Anyway...when this box is checked latents will not be cached. When latents are not cached, you will save a bit of VRAM, but train slightly slower. Train Text Encoder - Not required, but recommended. Enabling this will probably cost a bit more VRAM, but also purportedly increase output image fidelity. Use 8Bit Adam - Enable this to save VRAM. Should now work on both windows and Linux without needing WSL. Center Crop - Crop images if they aren't the right dimensions? I don't use this, and I recommend you just crop your images \"right\". Gradient Checkpointing - Enable this to save VRAM at the cost of a bit of speed. Scale Learning Rate - I don't use this, not sure what impact it has on performance or output quality. Mixed Precision - Set to 'fp16' to save VRAM at the cost of speed. Everything after 'Mixed Precision' - Adjust at your own risk. Performance/quality benefits from changing these remain to be tested. The next two were added after I wrote the above bit, so just ignore me being a big liar. Pad Tokens - Pads the text tokens to a longer length for some reason. Max Token Length - raise the tokenizer's default limit above 75. Requires Pad Tokens for > 75. Apply Horizontal Flip - \"Apply horizontal flip augmentation\". Flips images horizontally at random, which can potentially offer better editability? Use EMA for finetuning - Use exponential moving average weight to reduce overfitting during the last iterations.","title":"Advanced Settings"},{"location":"archive/dreambooth-rehberi/#continuing-training","text":"Once a model has been trained for any number of steps, a config file is saved which contains all of the parameters from the UI. If you wish to continue training a model, you can simply select the model name from the dropdown and then click the blue button next to the model name dropdown to load previous parameters.","title":"Continuing Training"},{"location":"archive/dreambooth-rehberi/#use-dreambooth-to-fine-tune-stable-diffusion-in-google-colab","text":"","title":"Use DreamBooth to Fine-Tune Stable Diffusion in Google Colab"},{"location":"archive/dreambooth-rehberi/#prepare-images","text":"","title":"Prepare Images"},{"location":"archive/dreambooth-rehberi/#choosing-images","text":"When choosing images, it\u2019s recommended to keep the following in mind to get the best results: Upload a variety of images of your subject. If you\u2019re uploading images of a person, try something like 70% close-ups, 20% from the chest up, 10% full body, so Stable Diffusion also gets some idea of the rest of the subject and not only the face. Try to change things up as much as possible in each picture. This means: Varying the body pose Taking pictures on different days, in different lighting conditions, and with different backgrounds Showing a variety of expressions and emotions When generating new images, whatever you capture will be over-represented. For example, if you take multiple pictures with the same green field behind you, it\u2019s likely that the generated images of you will also contain the green field, even if you want a dystopic background. This can apply to anything, like jewelry, clothes, or even people in the background. If you want to avoid seeing that element in your generated image, make sure not to repeat it in every shot. On the other hand, if you want it in the generated images, make sure it\u2019s in your pictures more often. It\u2019s recommended that you provide ~50 images of what you\u2019d like to train Stable Diffusion on to get great results. However, I\u2019ve only used 20-30 so far, and the results are pretty good. If you\u2019re just starting out and want to test it out, I think 20-30 images should be good enough for now, and you can get 50 images after you\u2019ve seen it work.","title":"Choosing Images"},{"location":"archive/dreambooth-rehberi/#resize-crop-to-512-x-512px","text":"Once you\u2019ve chosen your images, you should prepare them. First, we need to resize and crop our images to be 512 x 512px. We can easily do this using the website https://birme.net . To do this, just: Visit the website Upload your images Set your dimensions to 512 x 512px Adjust the cropping area to center your subject Click on Save as Zip to download the archive. You can then unzip it on your computer, and we\u2019ll use them a bit later. Birme.net - Resize Images Resizing Images using Birme.net","title":"Resize &amp; Crop to 512 x 512px"},{"location":"archive/dreambooth-rehberi/#renaming-your-images","text":"We\u2019ll also want to rename our images to contain the subject\u2019s name: Firstly, the subject name should be one unique/random/unknown keyword. This is because Stable Diffusion also has some knowledge of The Sandman from other sources other than the one played by Tom Sturridge and we don\u2019t want it to get confused and make a combination of interpretations of The Sandman. As such, I\u2019ll call it Sandman2022 to make sure it\u2019s unique. Renaming images to subject (1), subject (2) .. subject (30). This is because, using this method, you can train multiple subjects at once. If you want to fine-tune Stable Diffusion with Sandman, your friend Kevin, and your cat, you can give it prepare images for each of them. For the Sandman you\u2019d have Sandman2022 (1), Sandman2022 (2) \u2026 Sandman (30), for Kevin you\u2019d have KevinKevinson2022 (1), KevinKevinson2022 (2) \u2026 KevinKevinson (30), and for your cat you\u2019d have DexterTheCat (1), DexterTheCat (2) \u2026 DexterTheCat(30). Here\u2019s me renaming my images for Sandman2022 in bulk on Windows. Just select them all, right click one of them and click Rename and give it what name you want and click anywhere to finish the renaming. Everything else will be renamed as well.","title":"Renaming Your Images"},{"location":"archive/instant-ngp-windows/","text":"Instant Neural Graphics Primitives ! Requirements An NVIDIA GPU ; tensor cores increase performance when available. All shown results come from an RTX 3090. Python ver: 3.9.* Visual Studio Community 2019 (Latest the best, ~8GB) Below are the install requirements CUDA v11.6 . You can check ur CUDA version via nvcc --version in any prompt and if it's not CUDA11.6, refer to this to swap/install the correct version. On some machines, pyexr refuses to install via pip . This can be resolved by installing OpenEXR from here . See later. This installation tutorial will be using Anaconda. Download anaconda prompt here . OptiX 7.3 or higher for faster mesh SDF training. You need to either login or join to obtain the installer. Set the system environment variables OptiX_INSTALL_DIR to the installation directory if it is not discovered automatically. Should look like this: Compilation copy these files C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\\extras\\visual_studio_integration\\MSBuildExtensions to here C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations cd into a directory that you want to download the codes at. Eg. cd F:\\Tutorial\\ngp\\ Begin by cloning this repository and all its submodules using the following command (if you don't have git, download here and add to path): $ git clone --recursive https://github.com/nvlabs/instant-ngp $ cd instant-ngp if your python is not 3.9 (check with command python --version ) then you need to run the following command to get it to ver 3.9.* conda install python=3.9 Then, open Developer Command Prompt , you can find this in your search bar. Then cd to where you cloned your repository so you are in its root folder /instant-ng/ : cmake . -B build cmake --build build --config RelWithDebInfo -j 16 If the any of these build fails, please consult this list of possible fixes before opening an issue. If automatic GPU architecture detection fails, (as can happen if you have multiple GPUs installed), set the TCNN_CUDA_ARCHITECTURES enivonment variable for the GPU you would like to use. The following table lists the values for common GPUs. If your GPU is not listed, consult this exhaustive list . RTX 30X0 A100 RTX 20X0 TITAN V / V100 GTX 10X0 / TITAN Xp GTX 9X0 K80 86 80 75 70 61 52 37 Interactive Training and Rendering on Custom Image Sets Install COLMAP , I used ver 3.7 Add it to your system environment variables at Environment Variables > System Variables Path > Edit environment variable open anaconda prompt, if you don't have you don't have you can get it here cd into isntant-ngp as root conda create -n ngp python=3.9 conda activate ngp pip install -r requirements.txt if pyexr cannot be installed via pip install pyexr , download OpenEXR\u20111.3.2\u2011cp39\u2011cp39\u2011win_amd64.whl and move it to your root folder. Then you can run: pip install OpenEXR-1.3.2-cp39-cp39-win_amd64.whl Place your custom image set under data/<image_set_name> Get transform.json from the following command. Insert your path to your images at <image/path> python scripts/colmap2nerf.py --colmap_matcher exhaustive --run_colmap --aabb_scale 16 --images <image/path> transform.json will be generated at the root folder, drag and drop it into your data/<image_set_name> folder. You have to reorganize the folder structure due to how transforms.json is created... For example: File Structure BEFORE generating transform.json \ud83d\udcc2instant-ngp/ # this is root \u251c\u2500\u2500 \ud83d\udcc2data/ \u2502 \u251c\u2500\u2500 \ud83d\udcc2toy_truck/ \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_001.jpg \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_002.jpg \u2502 \u2502 \u2502... \u2502 \u2502... \u2502... File Structure AFTER generating transform.json \ud83d\udcc2instant-ngp/ # this is root \u251c\u2500\u2500 \ud83d\udcc2data/ \u2502 \u251c\u2500\u2500 \ud83d\udcc2toy_truck/ \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctransforms.json/ \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc2data/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc2toy_truck/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_001.jpg \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_002.jpg \u2502 \u2502 \u2502 \u2502 \u2502... \u2502 \u2502 \u2502 \u2502... \u2502 \u2502 \u2502... \u2502 \u2502... \u2502... Note: adjusting the \"aabb_scale\" inside transform.json can reduce load on GPU VRAM. The lower the value the less intensive it'll be. Finally, to run instant-ngp: <path_to_your_ngp>\\instant-ngp\\build\\testbed.exe --scene data/<image_set_name> eg. C:\\user\\user\\download\\instant-ngp\\build\\testbed.exe --scene data/toy_truck And it should launch the GUI and everything amazing with it Rendering custom camera path May need to install more dependencies. Install pip install tqdm scipy pillow opencv-python , conda install -c conda-forge ffmpeg , might be needed in the conda virtual environment. Refer to installation of pyexr above in the installation section if you didn't install that too. Train any image set like above. After you have reached a point that you are satisfied with your training, save a Snapshot on the GUI. (one of the tabs & no need to edit the path & the name) Find another GUI called camera path, it'll play hide and seek with you but it is there so find that window. The GUI is so well made, if you know how to use any 3D engine, it's really similar. Add camera path will give you a new angle of the camera. After you have finished adding your camera points, save the camera path. (no need to edit the path & the name) Render the path with the following command: python scripts/render.py --scene <scene_path> --n_seconds <seconds> --fps <fps> --render_name <name> --width <resolution_width> --height <resolution_height> eg. python scripts/render.py --scene data/toy --n_seconds 5 --fps 60 --render_name test --width 1920 --height 1080 Your video will be saved at root. You might have to play around with the fps and n_seconds to speed up or slow down. I couldn't get it accurately because of the lack of information and this is the best I could come up with. To be honest, this is only a short-term solution too, since the author has promised to publish an official one. So stay tuned! And my fork edits end here. Interactive training and rendering This codebase comes with an interactive testbed that includes many features beyond our academic publication: Additional training features, such as extrinsics and intrinsics optimization. Marching cubes for NeRF->Mesh and SDF->Mesh conversion. A spline-based camera path editor to create videos. Debug visualizations of the activations of every neuron input and output. And many more task-specific settings. See also our one minute demonstration video of the tool . NeRF fox One test scene is provided in this repository, using a small number of frames from a casually captured phone video: instant-ngp$ ./build/testbed --scene data/nerf/fox Alternatively, download any NeRF-compatible scene (e.g. from the NeRF authors' drive ). Now you can run: instant-ngp$ ./build/testbed --scene data/nerf_synthetic/lego/transforms_train.json For more information about preparing datasets for use with our NeRF implementation, please see this document . SDF armadillo instant-ngp$ ./build/testbed --scene data/sdf/armadillo.obj Image of Einstein instant-ngp$ ./build/testbed --scene data/image/albert.exr To reproduce the gigapixel results, download, for example, the Tokyo image and convert it to .bin using the scripts/image2bin.py script. This custom format improves compatibility and loading speed when resolution is high. Now you can run: instant-ngp$ ./build/testbed --scene data/image/tokyo.bin Volume Renderer Download the nanovdb volume for the Disney cloud , which is derived from here ( CC BY-SA 3.0 ). instant-ngp$ ./build/testbed --mode volume --scene data/volume/wdas_cloud_quarter.nvdb Python bindings To conduct controlled experiments in an automated fashion, all features from the interactive testbed (and more!) have Python bindings that can be easily instrumented. For an example of how the ./build/testbed application can be implemented and extended from within Python, see ./scripts/run.py , which supports a superset of the command line arguments that ./build/testbed does. Happy hacking! Troubleshooting compile errors Before investigating further, make sure all submodules are up-to-date and try compiling again. instant-ngp$ git submodule sync --recursive instant-ngp$ git submodule update --init --recursive If instant-ngp still fails to compile, update CUDA as well as your compiler to the latest versions you can install on your system. It is crucial that you update both , as newer CUDA versions are not always compatible with earlier compilers and vice versa. If your problem persists, consult the following table of known issues. Problem Resolution CMake error: No CUDA toolset found / CUDA_ARCHITECTURES is empty for target \"cmTC_0c70f\" Windows: the Visual Studio CUDA integration was not installed correctly. Follow these instructions to fix the problem without re-installing CUDA. ( #18 ) Linux: Environment variables for your CUDA installation are probably incorrectly set. You may work around the issue using cmake . -B build -DCMAKE_CUDA_COMPILER=/usr/local/cuda-<your cuda version>/bin/nvcc ( #28 ) CMake error: No known features for CXX compiler \"MSVC\" Reinstall Visual Studio & make sure you run CMake from a developer shell. ( #21 ) Compile error: undefined references to \"cudaGraphExecUpdate\" / identifier \"cublasSetWorkspace\" is undefined Update your CUDA installation (which is likely 11.0) to 11.3 or higher. ( #34 #41 #42 ) Compile error: too few arguments in function call Update submodules with the above two git commands. ( #37 #52 ) Python error: No module named 'pyngp' It is likely that CMake did not detect your Python installation and therefore did not build pyngp . Check CMake logs to verify this. If pyngp was built in a different folder than instant-ngp/build , Python will be unable to detect it and you have to supply the full path to the import statement. ( #43 ) If you cannot find your problem in the table, please feel free to open an issue and ask for help. Thanks Many thanks to Jonathan Tremblay and Andrew Tao for testing early versions of this codebase and to Arman Toorians and Saurabh Jain for the factory robot dataset. We also thank Andrew Webb for noticing that one of the prime numbers in the spatial hash was not actually prime; this has been fixed since. This project makes use of a number of awesome open source libraries, including: tiny-cuda-nn for fast CUDA MLP networks tinyexr for EXR format support tinyobjloader for OBJ format support stb_image for PNG and JPEG support Dear ImGui an excellent immediate mode GUI library Eigen a C++ template library for linear algebra pybind11 for seamless C++ / Python interop and others! See the dependencies folder. Many thanks to the authors of these brilliant projects! License and Citation @article{mueller2022instant, title = {Instant Neural Graphics Primitives with a Multiresolution Hash Encoding}, author = {Thomas M\\\"uller and Alex Evans and Christoph Schied and Alexander Keller}, journal = {arXiv:2201.05989}, year = {2022}, month = jan } Copyright \u00a9 2022, NVIDIA Corporation. All rights reserved. This work is made available under the Nvidia Source Code License-NC. Click here to view a copy of this license.","title":"Instang NGP"},{"location":"archive/instant-ngp-windows/#instant-neural-graphics-primitives","text":"","title":"Instant Neural Graphics Primitives !"},{"location":"archive/instant-ngp-windows/#requirements","text":"An NVIDIA GPU ; tensor cores increase performance when available. All shown results come from an RTX 3090. Python ver: 3.9.* Visual Studio Community 2019 (Latest the best, ~8GB) Below are the install requirements CUDA v11.6 . You can check ur CUDA version via nvcc --version in any prompt and if it's not CUDA11.6, refer to this to swap/install the correct version. On some machines, pyexr refuses to install via pip . This can be resolved by installing OpenEXR from here . See later. This installation tutorial will be using Anaconda. Download anaconda prompt here . OptiX 7.3 or higher for faster mesh SDF training. You need to either login or join to obtain the installer. Set the system environment variables OptiX_INSTALL_DIR to the installation directory if it is not discovered automatically. Should look like this:","title":"Requirements"},{"location":"archive/instant-ngp-windows/#compilation","text":"copy these files C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\\extras\\visual_studio_integration\\MSBuildExtensions to here C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations cd into a directory that you want to download the codes at. Eg. cd F:\\Tutorial\\ngp\\ Begin by cloning this repository and all its submodules using the following command (if you don't have git, download here and add to path): $ git clone --recursive https://github.com/nvlabs/instant-ngp $ cd instant-ngp if your python is not 3.9 (check with command python --version ) then you need to run the following command to get it to ver 3.9.* conda install python=3.9 Then, open Developer Command Prompt , you can find this in your search bar. Then cd to where you cloned your repository so you are in its root folder /instant-ng/ : cmake . -B build cmake --build build --config RelWithDebInfo -j 16 If the any of these build fails, please consult this list of possible fixes before opening an issue. If automatic GPU architecture detection fails, (as can happen if you have multiple GPUs installed), set the TCNN_CUDA_ARCHITECTURES enivonment variable for the GPU you would like to use. The following table lists the values for common GPUs. If your GPU is not listed, consult this exhaustive list . RTX 30X0 A100 RTX 20X0 TITAN V / V100 GTX 10X0 / TITAN Xp GTX 9X0 K80 86 80 75 70 61 52 37","title":"Compilation"},{"location":"archive/instant-ngp-windows/#interactive-training-and-rendering-on-custom-image-sets","text":"Install COLMAP , I used ver 3.7 Add it to your system environment variables at Environment Variables > System Variables Path > Edit environment variable open anaconda prompt, if you don't have you don't have you can get it here cd into isntant-ngp as root conda create -n ngp python=3.9 conda activate ngp pip install -r requirements.txt if pyexr cannot be installed via pip install pyexr , download OpenEXR\u20111.3.2\u2011cp39\u2011cp39\u2011win_amd64.whl and move it to your root folder. Then you can run: pip install OpenEXR-1.3.2-cp39-cp39-win_amd64.whl Place your custom image set under data/<image_set_name> Get transform.json from the following command. Insert your path to your images at <image/path> python scripts/colmap2nerf.py --colmap_matcher exhaustive --run_colmap --aabb_scale 16 --images <image/path> transform.json will be generated at the root folder, drag and drop it into your data/<image_set_name> folder. You have to reorganize the folder structure due to how transforms.json is created... For example: File Structure BEFORE generating transform.json \ud83d\udcc2instant-ngp/ # this is root \u251c\u2500\u2500 \ud83d\udcc2data/ \u2502 \u251c\u2500\u2500 \ud83d\udcc2toy_truck/ \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_001.jpg \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_002.jpg \u2502 \u2502 \u2502... \u2502 \u2502... \u2502... File Structure AFTER generating transform.json \ud83d\udcc2instant-ngp/ # this is root \u251c\u2500\u2500 \ud83d\udcc2data/ \u2502 \u251c\u2500\u2500 \ud83d\udcc2toy_truck/ \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctransforms.json/ \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc2data/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcc2toy_truck/ \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_001.jpg \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 \ud83d\udcdctoy_truck_002.jpg \u2502 \u2502 \u2502 \u2502 \u2502... \u2502 \u2502 \u2502 \u2502... \u2502 \u2502 \u2502... \u2502 \u2502... \u2502... Note: adjusting the \"aabb_scale\" inside transform.json can reduce load on GPU VRAM. The lower the value the less intensive it'll be. Finally, to run instant-ngp: <path_to_your_ngp>\\instant-ngp\\build\\testbed.exe --scene data/<image_set_name> eg. C:\\user\\user\\download\\instant-ngp\\build\\testbed.exe --scene data/toy_truck And it should launch the GUI and everything amazing with it","title":"Interactive Training and Rendering on Custom Image Sets"},{"location":"archive/instant-ngp-windows/#rendering-custom-camera-path","text":"May need to install more dependencies. Install pip install tqdm scipy pillow opencv-python , conda install -c conda-forge ffmpeg , might be needed in the conda virtual environment. Refer to installation of pyexr above in the installation section if you didn't install that too. Train any image set like above. After you have reached a point that you are satisfied with your training, save a Snapshot on the GUI. (one of the tabs & no need to edit the path & the name) Find another GUI called camera path, it'll play hide and seek with you but it is there so find that window. The GUI is so well made, if you know how to use any 3D engine, it's really similar. Add camera path will give you a new angle of the camera. After you have finished adding your camera points, save the camera path. (no need to edit the path & the name) Render the path with the following command: python scripts/render.py --scene <scene_path> --n_seconds <seconds> --fps <fps> --render_name <name> --width <resolution_width> --height <resolution_height> eg. python scripts/render.py --scene data/toy --n_seconds 5 --fps 60 --render_name test --width 1920 --height 1080 Your video will be saved at root. You might have to play around with the fps and n_seconds to speed up or slow down. I couldn't get it accurately because of the lack of information and this is the best I could come up with. To be honest, this is only a short-term solution too, since the author has promised to publish an official one. So stay tuned! And my fork edits end here.","title":"Rendering custom camera path"},{"location":"archive/instant-ngp-windows/#interactive-training-and-rendering","text":"This codebase comes with an interactive testbed that includes many features beyond our academic publication: Additional training features, such as extrinsics and intrinsics optimization. Marching cubes for NeRF->Mesh and SDF->Mesh conversion. A spline-based camera path editor to create videos. Debug visualizations of the activations of every neuron input and output. And many more task-specific settings. See also our one minute demonstration video of the tool .","title":"Interactive training and rendering"},{"location":"archive/instant-ngp-windows/#nerf-fox","text":"One test scene is provided in this repository, using a small number of frames from a casually captured phone video: instant-ngp$ ./build/testbed --scene data/nerf/fox Alternatively, download any NeRF-compatible scene (e.g. from the NeRF authors' drive ). Now you can run: instant-ngp$ ./build/testbed --scene data/nerf_synthetic/lego/transforms_train.json For more information about preparing datasets for use with our NeRF implementation, please see this document .","title":"NeRF fox"},{"location":"archive/instant-ngp-windows/#sdf-armadillo","text":"instant-ngp$ ./build/testbed --scene data/sdf/armadillo.obj","title":"SDF armadillo"},{"location":"archive/instant-ngp-windows/#image-of-einstein","text":"instant-ngp$ ./build/testbed --scene data/image/albert.exr To reproduce the gigapixel results, download, for example, the Tokyo image and convert it to .bin using the scripts/image2bin.py script. This custom format improves compatibility and loading speed when resolution is high. Now you can run: instant-ngp$ ./build/testbed --scene data/image/tokyo.bin","title":"Image of Einstein"},{"location":"archive/instant-ngp-windows/#volume-renderer","text":"Download the nanovdb volume for the Disney cloud , which is derived from here ( CC BY-SA 3.0 ). instant-ngp$ ./build/testbed --mode volume --scene data/volume/wdas_cloud_quarter.nvdb","title":"Volume Renderer"},{"location":"archive/instant-ngp-windows/#python-bindings","text":"To conduct controlled experiments in an automated fashion, all features from the interactive testbed (and more!) have Python bindings that can be easily instrumented. For an example of how the ./build/testbed application can be implemented and extended from within Python, see ./scripts/run.py , which supports a superset of the command line arguments that ./build/testbed does. Happy hacking!","title":"Python bindings"},{"location":"archive/instant-ngp-windows/#troubleshooting-compile-errors","text":"Before investigating further, make sure all submodules are up-to-date and try compiling again. instant-ngp$ git submodule sync --recursive instant-ngp$ git submodule update --init --recursive If instant-ngp still fails to compile, update CUDA as well as your compiler to the latest versions you can install on your system. It is crucial that you update both , as newer CUDA versions are not always compatible with earlier compilers and vice versa. If your problem persists, consult the following table of known issues. Problem Resolution CMake error: No CUDA toolset found / CUDA_ARCHITECTURES is empty for target \"cmTC_0c70f\" Windows: the Visual Studio CUDA integration was not installed correctly. Follow these instructions to fix the problem without re-installing CUDA. ( #18 ) Linux: Environment variables for your CUDA installation are probably incorrectly set. You may work around the issue using cmake . -B build -DCMAKE_CUDA_COMPILER=/usr/local/cuda-<your cuda version>/bin/nvcc ( #28 ) CMake error: No known features for CXX compiler \"MSVC\" Reinstall Visual Studio & make sure you run CMake from a developer shell. ( #21 ) Compile error: undefined references to \"cudaGraphExecUpdate\" / identifier \"cublasSetWorkspace\" is undefined Update your CUDA installation (which is likely 11.0) to 11.3 or higher. ( #34 #41 #42 ) Compile error: too few arguments in function call Update submodules with the above two git commands. ( #37 #52 ) Python error: No module named 'pyngp' It is likely that CMake did not detect your Python installation and therefore did not build pyngp . Check CMake logs to verify this. If pyngp was built in a different folder than instant-ngp/build , Python will be unable to detect it and you have to supply the full path to the import statement. ( #43 ) If you cannot find your problem in the table, please feel free to open an issue and ask for help.","title":"Troubleshooting compile errors"},{"location":"archive/instant-ngp-windows/#thanks","text":"Many thanks to Jonathan Tremblay and Andrew Tao for testing early versions of this codebase and to Arman Toorians and Saurabh Jain for the factory robot dataset. We also thank Andrew Webb for noticing that one of the prime numbers in the spatial hash was not actually prime; this has been fixed since. This project makes use of a number of awesome open source libraries, including: tiny-cuda-nn for fast CUDA MLP networks tinyexr for EXR format support tinyobjloader for OBJ format support stb_image for PNG and JPEG support Dear ImGui an excellent immediate mode GUI library Eigen a C++ template library for linear algebra pybind11 for seamless C++ / Python interop and others! See the dependencies folder. Many thanks to the authors of these brilliant projects!","title":"Thanks"},{"location":"archive/instant-ngp-windows/#license-and-citation","text":"@article{mueller2022instant, title = {Instant Neural Graphics Primitives with a Multiresolution Hash Encoding}, author = {Thomas M\\\"uller and Alex Evans and Christoph Schied and Alexander Keller}, journal = {arXiv:2201.05989}, year = {2022}, month = jan } Copyright \u00a9 2022, NVIDIA Corporation. All rights reserved. This work is made available under the Nvidia Source Code License-NC. Click here to view a copy of this license.","title":"License and Citation"},{"location":"archive/nerf-studio-docker/","text":"NerfStudio Installation Docker Install Docker Pull cuda.11.3 image docker pull nvidia/cuda:11.3.0-base-ubuntu20.04 docker run --name nerf_docker --gpus all -p 3000:3000 -it cobanovgithub apt-get update apt-get install wget ns-download-data --dataset=nerfstudio --capture=poster ns-train nerfacto --viewer.websocket-port 3000 nerfstudio-data --data data/nerfstudio/poster --downscale-factor 4 CONDA Download the latest shell script wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh Make the miniconda installation script executable chmod +x Miniconda3-latest-Linux-x86_64.sh Run miniconda installation script ./Miniconda3-latest-Linux-x86_64.sh Create and activate an conda environment To create a conda environment, run conda create -n newenv You can also create the environment from a file like environment.yml, you can use use the conda env create -f command: conda env create -f environment.yml. The environment name will be the directory name. source ~/.bashrc Create environment conda create --name nerfstudio -y python=3.8 conda activate nerfstudio python -m pip install --upgrade pip TinyCudaNN apt-get install build-essential git source ~/.bashrc pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 -f https://download.pytorch.org/whl/torch_stable.html","title":"NerfStudio Installation"},{"location":"archive/nerf-studio-docker/#nerfstudio-installation","text":"","title":"NerfStudio Installation"},{"location":"archive/nerf-studio-docker/#docker","text":"Install Docker Pull cuda.11.3 image docker pull nvidia/cuda:11.3.0-base-ubuntu20.04 docker run --name nerf_docker --gpus all -p 3000:3000 -it cobanovgithub apt-get update apt-get install wget ns-download-data --dataset=nerfstudio --capture=poster ns-train nerfacto --viewer.websocket-port 3000 nerfstudio-data --data data/nerfstudio/poster --downscale-factor 4","title":"Docker"},{"location":"archive/nerf-studio-docker/#conda","text":"Download the latest shell script wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh Make the miniconda installation script executable chmod +x Miniconda3-latest-Linux-x86_64.sh Run miniconda installation script ./Miniconda3-latest-Linux-x86_64.sh Create and activate an conda environment To create a conda environment, run conda create -n newenv You can also create the environment from a file like environment.yml, you can use use the conda env create -f command: conda env create -f environment.yml. The environment name will be the directory name. source ~/.bashrc","title":"CONDA"},{"location":"archive/nerf-studio-docker/#create-environment","text":"conda create --name nerfstudio -y python=3.8 conda activate nerfstudio python -m pip install --upgrade pip","title":"Create environment"},{"location":"archive/nerf-studio-docker/#tinycudann","text":"apt-get install build-essential git source ~/.bashrc pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 -f https://download.pytorch.org/whl/torch_stable.html","title":"TinyCudaNN"},{"location":"archive/training-own-diffusion/","text":"Training Own Diffusion Model Kernel Inception Distance The kernel inception distance (KID) is a measure of the similarity between two sets of images. It was introduced by Google AI researcher, Tobias Weyand, in his paper \"Kernel Inception Distance: A New Distance Measure for Improved Image Quality Assessment\". In this paper, Weyand proposed using the KID to measure the difference between the activations of two sets of images when passed through an inception network, which is a type of deep learning neural network. The KID is calculated as the squared L2 distance between the distributions of the activations of the two sets of images. It is typically used in the field of computer vision to evaluate the performance of image generation algorithms. Sources https://keras.io/examples/generative/ddim/#denoising-diffusion-implicit-models https://benanne.github.io/2022/01/31/diffusion.html https://github.com/apapiu/guided-diffusion-keras https://www.louisbouchard.ai/latent-diffusion-models/ https://www.kaggle.com/code/apapiu/train-latent-diffusion-in-keras-from-scratch https://github.com/CompVis/taming-transformers https://github.com/CompVis/latent-diffusion https://github.com/huggingface/diffusers","title":"Training Own Diffusion Model"},{"location":"archive/training-own-diffusion/#training-own-diffusion-model","text":"","title":"Training Own Diffusion Model"},{"location":"archive/training-own-diffusion/#kernel-inception-distance","text":"The kernel inception distance (KID) is a measure of the similarity between two sets of images. It was introduced by Google AI researcher, Tobias Weyand, in his paper \"Kernel Inception Distance: A New Distance Measure for Improved Image Quality Assessment\". In this paper, Weyand proposed using the KID to measure the difference between the activations of two sets of images when passed through an inception network, which is a type of deep learning neural network. The KID is calculated as the squared L2 distance between the distributions of the activations of the two sets of images. It is typically used in the field of computer vision to evaluate the performance of image generation algorithms.","title":"Kernel Inception Distance"},{"location":"archive/training-own-diffusion/#sources","text":"https://keras.io/examples/generative/ddim/#denoising-diffusion-implicit-models https://benanne.github.io/2022/01/31/diffusion.html https://github.com/apapiu/guided-diffusion-keras https://www.louisbouchard.ai/latent-diffusion-models/ https://www.kaggle.com/code/apapiu/train-latent-diffusion-in-keras-from-scratch https://github.com/CompVis/taming-transformers https://github.com/CompVis/latent-diffusion https://github.com/huggingface/diffusers","title":"Sources"},{"location":"assets/stable/","text":"Cobanov's Stable Diffusion Notes Type's of Fine-tuning Source: reddit post 1. Textual Inversion Textual Inversion - trains a word with one or more vectors that approximate your image. So if it is something it already has seen lots of examples of, it might have the concept and just need to 'point' at it. It is just expanding the vocabulary of model but all information it uses is already in the model. 2. Dreambooth Dreambooth - this is essentially model fine tuning, which changes the weights of the main model. Dreambooth differs from typical fine tuning in that in tries to keep from forgetting/overwriting adjacent concepts during the tuning. 3. Hypernetwork Hypernetworks - this is basically an adaptive head - it takes information from late in the model but injects information from the prompt 'skipping' the rest of the model. So it is similar to fine tuning the last 2 layers of a model but it gets much more signal from the prompt (it is taking the clip embedding of the prompt right before the output layer). Discussions: Hypernetwork training topic Links Stable Diffusion Models Textual Inversion vs Hypernetworks Textual Inversion and Hyper Network have different driving principles, and Textual Inversion has much smaller capacity of learning results than Hyper Network. Textual Inversion has a slower learning speed than Hyper Network, so it is more suitable for learning specific objects, characters, features, etc. than abstract things such as patterns and painting styles. Also, in order to memorize the pattern and painting style, it is necessary to prepare data that has been unified to some extent, such as coloring and color usage, so it is more difficult to prepare learning data than Hyper Network. Also, Hyper Network can only embed one at a time, but even so, it is OK if you prepare a large amount of data using various patterns of composition, materials, and techniques and let it learn. Therefore, it can be said that Hyper Network is more suitable for improving the accuracy of illustrations. However, textual inversion is easier to handle if you want to remember specific patterns and characteristics. Training Hypernetworks hyper network layer structure If write \"1, 2, 1\", hypernetworks are composed of 2 fully connected layers whose intermediate dim is 2x, which is same as up to now. The more you add the number, like \"1, 2, 4, 2, 1\", the more the structure of hypernetworks becomes deeper. Deep hypernetworks are suited for training with large datasets. Add layer normalization If checked, add layer normalization after every fully connected layer. It would be meaningful to prevent hypernetworks from overfitting and make training more stable. https://rentry.org/sd-e621-textual-inversion","title":"Cobanov's Stable Diffusion Notes"},{"location":"assets/stable/#cobanovs-stable-diffusion-notes","text":"","title":"Cobanov's Stable Diffusion Notes"},{"location":"assets/stable/#types-of-fine-tuning","text":"Source: reddit post","title":"Type's of Fine-tuning"},{"location":"assets/stable/#1-textual-inversion","text":"Textual Inversion - trains a word with one or more vectors that approximate your image. So if it is something it already has seen lots of examples of, it might have the concept and just need to 'point' at it. It is just expanding the vocabulary of model but all information it uses is already in the model.","title":"1. Textual Inversion"},{"location":"assets/stable/#2-dreambooth","text":"Dreambooth - this is essentially model fine tuning, which changes the weights of the main model. Dreambooth differs from typical fine tuning in that in tries to keep from forgetting/overwriting adjacent concepts during the tuning.","title":"2. Dreambooth"},{"location":"assets/stable/#3-hypernetwork","text":"Hypernetworks - this is basically an adaptive head - it takes information from late in the model but injects information from the prompt 'skipping' the rest of the model. So it is similar to fine tuning the last 2 layers of a model but it gets much more signal from the prompt (it is taking the clip embedding of the prompt right before the output layer).","title":"3. Hypernetwork"},{"location":"assets/stable/#discussions","text":"Hypernetwork training topic","title":"Discussions:"},{"location":"assets/stable/#links","text":"Stable Diffusion Models","title":"Links"},{"location":"assets/stable/#textual-inversion-vs-hypernetworks","text":"Textual Inversion and Hyper Network have different driving principles, and Textual Inversion has much smaller capacity of learning results than Hyper Network. Textual Inversion has a slower learning speed than Hyper Network, so it is more suitable for learning specific objects, characters, features, etc. than abstract things such as patterns and painting styles. Also, in order to memorize the pattern and painting style, it is necessary to prepare data that has been unified to some extent, such as coloring and color usage, so it is more difficult to prepare learning data than Hyper Network. Also, Hyper Network can only embed one at a time, but even so, it is OK if you prepare a large amount of data using various patterns of composition, materials, and techniques and let it learn. Therefore, it can be said that Hyper Network is more suitable for improving the accuracy of illustrations. However, textual inversion is easier to handle if you want to remember specific patterns and characteristics.","title":"Textual Inversion vs Hypernetworks"},{"location":"assets/stable/#training-hypernetworks","text":"hyper network layer structure If write \"1, 2, 1\", hypernetworks are composed of 2 fully connected layers whose intermediate dim is 2x, which is same as up to now. The more you add the number, like \"1, 2, 4, 2, 1\", the more the structure of hypernetworks becomes deeper. Deep hypernetworks are suited for training with large datasets. Add layer normalization If checked, add layer normalization after every fully connected layer. It would be meaningful to prevent hypernetworks from overfitting and make training more stable. https://rentry.org/sd-e621-textual-inversion","title":"Training Hypernetworks"}]}